{"projectName":"TopEducationApp","entities":[{"classInstance":{"name":"InstallmentEntity","javaFileType":"CLASS","layerAnnotation":"ENTITY","superClasses":[],"implementedInterfaces":[],"annotations":["Id","GeneratedValue","Column","Entity","Table","Data","NoArgsConstructor","AllArgsConstructor"],"constructors":[],"methods":[],"statements":[],"classVariables":[{"name":"id","type":"Long","scope":"instance"},{"name":"installmentRUT","type":"String","scope":"instance"},{"name":"installmentAmount","type":"int","scope":"instance"},{"name":"installmentStatus","type":"int","scope":"instance"},{"name":"installmentPaymentDate","type":"LocalDate","scope":"instance"},{"name":"installmentOverdueStatus","type":"int","scope":"instance"},{"name":"installmentOverduePrice","type":"int","scope":"instance"}],"innerClasses":[],"usedClasses":["Long","String","LocalDate","int"],"classDependencies":[],"dependentClasses":["InstallmentRepository","InstallmentService"],"genericUsages":null,"exceptionHandling":[],"linesOfCode":32},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":0,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate"],"EXTERNAL_UNKNOWN":["jakarta.persistence","lombok.AllArgsConstructor","lombok.Data","lombok.NoArgsConstructor"]},"programMetrics":{"numberOfMethods":0,"sumOfExecutableStatements":0,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":32},"complexityMetrics":{"approxMcCabeCC":0,"maxMethodMcCabeCC":0,"improvedCC":0.0},"couplingMetrics":{"afferentCoupling":2,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":0,"lackOfCohesion4":0,"lackOfCohesion5":0.0}}},{"classInstance":{"name":"StudentEntity","javaFileType":"CLASS","layerAnnotation":"ENTITY","superClasses":[],"implementedInterfaces":[],"annotations":["Id","GeneratedValue","Column","Entity","Table","Data","NoArgsConstructor","AllArgsConstructor"],"constructors":[],"methods":[],"statements":[],"classVariables":[{"name":"id","type":"Long","scope":"instance"},{"name":"rut","type":"String","scope":"instance"},{"name":"firstName","type":"String","scope":"instance"},{"name":"lastName","type":"String","scope":"instance"},{"name":"birthDate","type":"LocalDate","scope":"instance"},{"name":"schoolType","type":"int","scope":"instance"},{"name":"schoolName","type":"String","scope":"instance"},{"name":"graduationYear","type":"int","scope":"instance"},{"name":"examsTaken","type":"int","scope":"instance"},{"name":"averageGrade","type":"int","scope":"instance"},{"name":"paymentMethod","type":"String","scope":"instance"},{"name":"agreedInstallments","type":"int","scope":"instance"},{"name":"installmentsPaid","type":"int","scope":"instance"},{"name":"overdueInstallments","type":"int","scope":"instance"},{"name":"lastPaymentDate","type":"LocalDate","scope":"instance"},{"name":"totalAmountToPay","type":"int","scope":"instance"},{"name":"totalAmountPaid","type":"int","scope":"instance"}],"innerClasses":[],"usedClasses":["Long","String","LocalDate","int"],"classDependencies":[],"dependentClasses":["StudentController","AdministrationOffice","StudentService"],"genericUsages":null,"exceptionHandling":[],"linesOfCode":48},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":0,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate"],"EXTERNAL_UNKNOWN":["jakarta.persistence","lombok.AllArgsConstructor","lombok.Data","lombok.NoArgsConstructor"]},"programMetrics":{"numberOfMethods":0,"sumOfExecutableStatements":0,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":48},"complexityMetrics":{"approxMcCabeCC":0,"maxMethodMcCabeCC":0,"improvedCC":0.0},"couplingMetrics":{"afferentCoupling":3,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":0,"lackOfCohesion4":0,"lackOfCohesion5":0.0}}},{"classInstance":{"name":"StudentScoreEntity","javaFileType":"CLASS","layerAnnotation":"ENTITY","superClasses":[],"implementedInterfaces":[],"annotations":["Id","GeneratedValue","Column","Entity","Table","Data","NoArgsConstructor","AllArgsConstructor"],"constructors":[],"methods":[],"statements":[],"classVariables":[{"name":"id","type":"Long","scope":"instance"},{"name":"scoreRUT","type":"String","scope":"instance"},{"name":"score","type":"int","scope":"instance"},{"name":"examDate","type":"LocalDate","scope":"instance"},{"name":"studentName","type":"String","scope":"instance"},{"name":"studentLastName","type":"String","scope":"instance"}],"innerClasses":[],"usedClasses":["Long","String","LocalDate","int"],"classDependencies":[],"dependentClasses":["StudentScoreController","StudentScoreRepository","AdministrationOffice","StudentScoreService"],"genericUsages":null,"exceptionHandling":[],"linesOfCode":25},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":0,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate"],"EXTERNAL_UNKNOWN":["jakarta.persistence","lombok.AllArgsConstructor","lombok.Data","lombok.NoArgsConstructor"]},"programMetrics":{"numberOfMethods":0,"sumOfExecutableStatements":0,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":25},"complexityMetrics":{"approxMcCabeCC":0,"maxMethodMcCabeCC":0,"improvedCC":0.0},"couplingMetrics":{"afferentCoupling":4,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":0,"lackOfCohesion4":0,"lackOfCohesion5":0.0}}}],"documents":[],"repositories":[{"classInstance":{"name":"InstallmentRepository","javaFileType":"INTERFACE","layerAnnotation":"REPOSITORY","superClasses":["JpaRepository"],"implementedInterfaces":["InstallmentRepository"],"annotations":["Param","Query","Param","Query","Param","Query","Repository"],"constructors":[],"methods":[{"name":"findAllInstallmentsByRUT","basicInfo":{"accessModifier":"","returnType":"List<InstallmentEntity>"},"statementsInfo":{"numberOfStatements":0,"numberOfExecutableStatements":0,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[]},"inputParameters":[{"name":"installmentRUT","type":"String","annotations":["Param"]}],"outputParameters":[{"name":"return","type":"List<InstallmentEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":0,"mcCabeComplexity":1},"methodVariables":[]},{"name":"findAllPaidInstallmentsByRUT","basicInfo":{"accessModifier":"","returnType":"List<InstallmentEntity>"},"statementsInfo":{"numberOfStatements":0,"numberOfExecutableStatements":0,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[]},"inputParameters":[{"name":"installmentRUT","type":"String","annotations":["Param"]}],"outputParameters":[{"name":"return","type":"List<InstallmentEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":0,"mcCabeComplexity":1},"methodVariables":[]},{"name":"findAllOverdueInstallmentsByRUT","basicInfo":{"accessModifier":"","returnType":"List<InstallmentEntity>"},"statementsInfo":{"numberOfStatements":0,"numberOfExecutableStatements":0,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[]},"inputParameters":[{"name":"installmentRUT","type":"String","annotations":["Param"]}],"outputParameters":[{"name":"return","type":"List<InstallmentEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":0,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[],"classVariables":[],"innerClasses":[],"usedClasses":["InstallmentEntity","List","String","JpaRepository"],"classDependencies":["InstallmentEntity"],"dependentClasses":["InstallmentService"],"genericUsages":null,"exceptionHandling":[],"linesOfCode":20},"classAnalysisInstance":{"classCount":0,"interfaceCount":1,"statementCount":0,"classifiedDependencies":{"JAVA_STANDARD":["java.util.List"],"SPRING":["org.springframework.data.jpa.repository.JpaRepository","org.springframework.data.jpa.repository.Query","org.springframework.data.repository.query.Param","org.springframework.stereotype.Repository"],"INTERNAL":["TopEducation.TopEducationApp.entities.InstallmentEntity"]},"programMetrics":{"numberOfMethods":3,"sumOfExecutableStatements":0,"maxInputParameters":1,"maxOutputParameters":1,"linesOfCode":20},"complexityMetrics":{"approxMcCabeCC":3,"maxMethodMcCabeCC":1,"improvedCC":0.25},"couplingMetrics":{"afferentCoupling":1,"efferentCoupling":1,"instability":0.5},"cohesionMetrics":{"lackOfCohesion1":3,"lackOfCohesion2":3,"lackOfCohesion3":3,"lackOfCohesion4":3,"lackOfCohesion5":0.0}}},{"classInstance":{"name":"StudentRepository","javaFileType":"INTERFACE","layerAnnotation":"REPOSITORY","superClasses":["JpaRepository"],"implementedInterfaces":["StudentRepository"],"annotations":["Repository"],"constructors":[],"methods":[],"statements":[],"classVariables":[],"innerClasses":[],"usedClasses":["JpaRepository"],"classDependencies":[],"dependentClasses":["StudentService"],"genericUsages":null,"exceptionHandling":[],"linesOfCode":7},"classAnalysisInstance":{"classCount":0,"interfaceCount":1,"statementCount":0,"classifiedDependencies":{"SPRING":["org.springframework.data.jpa.repository.JpaRepository","org.springframework.stereotype.Repository"],"INTERNAL":["TopEducation.TopEducationApp.entities.StudentEntity"]},"programMetrics":{"numberOfMethods":0,"sumOfExecutableStatements":0,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":7},"complexityMetrics":{"approxMcCabeCC":0,"maxMethodMcCabeCC":0,"improvedCC":0.0},"couplingMetrics":{"afferentCoupling":1,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":0,"lackOfCohesion4":0,"lackOfCohesion5":0.0}}},{"classInstance":{"name":"StudentScoreRepository","javaFileType":"INTERFACE","layerAnnotation":"REPOSITORY","superClasses":["JpaRepository"],"implementedInterfaces":["StudentScoreRepository"],"annotations":["Param","Query","Repository"],"constructors":[],"methods":[{"name":"findAllGradesByStudentRUT","basicInfo":{"accessModifier":"","returnType":"ArrayList<StudentScoreEntity>"},"statementsInfo":{"numberOfStatements":0,"numberOfExecutableStatements":0,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[]},"inputParameters":[{"name":"gradeRUT","type":"String","annotations":["Param"]}],"outputParameters":[{"name":"return","type":"ArrayList<StudentScoreEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":0,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[],"classVariables":[],"innerClasses":[],"usedClasses":["StudentScoreEntity","ArrayList","String","JpaRepository"],"classDependencies":["StudentScoreEntity"],"dependentClasses":["StudentScoreService"],"genericUsages":null,"exceptionHandling":[],"linesOfCode":12},"classAnalysisInstance":{"classCount":0,"interfaceCount":1,"statementCount":0,"classifiedDependencies":{"JAVA_STANDARD":["java.util.ArrayList"],"SPRING":["org.springframework.data.jpa.repository.JpaRepository","org.springframework.data.jpa.repository.Query","org.springframework.data.repository.query.Param","org.springframework.stereotype.Repository"],"INTERNAL":["TopEducation.TopEducationApp.entities.StudentScoreEntity"]},"programMetrics":{"numberOfMethods":1,"sumOfExecutableStatements":0,"maxInputParameters":1,"maxOutputParameters":1,"linesOfCode":12},"complexityMetrics":{"approxMcCabeCC":1,"maxMethodMcCabeCC":1,"improvedCC":0.25},"couplingMetrics":{"afferentCoupling":1,"efferentCoupling":1,"instability":0.5},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":1,"lackOfCohesion4":1,"lackOfCohesion5":0.0}}}],"services":[{"classInstance":{"name":"AdministrationOffice","javaFileType":"CLASS","layerAnnotation":"SERVICE","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Generated","Service"],"constructors":[],"methods":[{"name":"isValidStudent","basicInfo":{"accessModifier":"public","returnType":"boolean"},"statementsInfo":{"numberOfStatements":15,"numberOfExecutableStatements":15,"numberOfControlStatements":6,"numberOfReturnStatements":7,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":19,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student´s parameters are valid\r\n// Verify if the student has a valid rut\r\nif (student.getRut() == null || student.getRut().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid first name\r\nif (student.getFirstName() == null || student.getFirstName().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student last name\r\nif (student.getLastName() == null || student.getLastName().isBlank()) {\r\n    return false;\r\n}"},{"type":"EXPRESSION","structure":"// Verify if the student´s birthdate is valid\r\nLocalDate currentDate = LocalDate.now();"},{"type":"EXPRESSION","structure":"int currentYear = java.time.LocalDate.now().getYear();"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"if (student.getBirthDate() == null || student.getBirthDate().isAfter(currentDate) || (currentYear - student.getBirthDate().getYear() > 100)) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid school type\r\nif (!(student.getSchoolType() == 0 || student.getSchoolType() == 1 || student.getSchoolType() == 2)) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid graduation year\r\nif (student.getGraduationYear() < 1900 || (student.getGraduationYear() > currentYear)) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return true;"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"boolean","annotations":[]}],"methodMetrics":{"linesOfCode":40,"mcCabeComplexity":26},"methodVariables":[{"name":"currentDate","type":"LocalDate","scope":"local"},{"name":"currentYear","type":"int","scope":"local"}]},{"name":"isValidStudentScore","basicInfo":{"accessModifier":"public","returnType":"boolean"},"statementsInfo":{"numberOfStatements":12,"numberOfExecutableStatements":12,"numberOfControlStatements":5,"numberOfReturnStatements":6,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":5,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student´s parameters are valid\r\n// Verify if the student has a valid rut\r\nif (studentScore.getScoreRUT() == null || studentScore.getScoreRUT().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid score\r\nif (studentScore.getScore() < 0 || studentScore.getScore() > 1000) {\r\n    return false;\r\n}"},{"type":"EXPRESSION","structure":"// Verify if the exam date is from this year\r\nLocalDate currentDate = LocalDate.now();"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"if (studentScore.getExamDate() == null || (studentScore.getExamDate().isAfter(currentDate))) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student name is valid\r\nif (studentScore.getStudentName() == null || studentScore.getStudentName().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student lastname is valid\r\nif (studentScore.getStudentLastName() == null || studentScore.getStudentLastName().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return true;"}]},"inputParameters":[{"name":"studentScore","type":"StudentScoreEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"boolean","annotations":[]}],"methodMetrics":{"linesOfCode":31,"mcCabeComplexity":11},"methodVariables":[{"name":"currentDate","type":"LocalDate","scope":"local"}]},{"name":"calculateMaxInstallments","basicInfo":{"accessModifier":"public","returnType":"int"},"statementsInfo":{"numberOfStatements":11,"numberOfExecutableStatements":11,"numberOfControlStatements":4,"numberOfReturnStatements":2,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Getting the school type of the student\r\nint schoolType = student.getSchoolType();"},{"type":"EXPRESSION","structure":"int maxInstallments = 0;"},{"type":"EXPRESSION","structure":"maxInstallments = 4;"},{"type":"IF","structure":"if (schoolType == 2) {\r\n    maxInstallments = 4;\r\n}"},{"type":"EXPRESSION","structure":"maxInstallments = 7;"},{"type":"IF","structure":"if (schoolType == 1) {\r\n    maxInstallments = 7;\r\n} else if (schoolType == 2) {\r\n    maxInstallments = 4;\r\n}"},{"type":"EXPRESSION","structure":"maxInstallments = 10;"},{"type":"IF","structure":"// School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\nif (schoolType == 0) {\r\n    maxInstallments = 10;\r\n} else if (schoolType == 1) {\r\n    maxInstallments = 7;\r\n} else if (schoolType == 2) {\r\n    maxInstallments = 4;\r\n}"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return maxInstallments;"},{"type":"IF","structure":"// Adding a validation to avoid trouble\r\nif (isValidStudent(student)) {\r\n    return maxInstallments;\r\n} else {\r\n    return 0;\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"int","annotations":[]}],"methodMetrics":{"linesOfCode":19,"mcCabeComplexity":5},"methodVariables":[{"name":"schoolType","type":"int","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"}]},{"name":"calculateAnnualCostCash","basicInfo":{"accessModifier":"public","returnType":"double"},"statementsInfo":{"numberOfStatements":4,"numberOfExecutableStatements":4,"numberOfControlStatements":1,"numberOfReturnStatements":2,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"double finalPrice = (enrollmentCost + annualDuty) * 0.5;"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return finalPrice;"},{"type":"IF","structure":"// Adding a validation to avoid trouble\r\nif (isValidStudent(student)) {\r\n    return finalPrice;\r\n} else {\r\n    return 0;\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"double","annotations":[]}],"methodMetrics":{"linesOfCode":9,"mcCabeComplexity":2},"methodVariables":[{"name":"finalPrice","type":"double","scope":"local"}]},{"name":"calculateSchoolTypeDiscount","basicInfo":{"accessModifier":"public","returnType":"double"},"statementsInfo":{"numberOfStatements":7,"numberOfExecutableStatements":7,"numberOfControlStatements":3,"numberOfReturnStatements":4,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return 0;"},{"type":"IF","structure":"if (student.getSchoolType() == 2) {\r\n    return 0;\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.1;"},{"type":"IF","structure":"if (student.getSchoolType() == 1) {\r\n    return 0.1;\r\n} else if (student.getSchoolType() == 2) {\r\n    return 0;\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.2;"},{"type":"IF","structure":"if (student.getSchoolType() == 0) {\r\n    return 0.2;\r\n} else if (student.getSchoolType() == 1) {\r\n    return 0.1;\r\n} else if (student.getSchoolType() == 2) {\r\n    return 0;\r\n} else {\r\n    return 0;\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"double","annotations":[]}],"methodMetrics":{"linesOfCode":11,"mcCabeComplexity":4},"methodVariables":[]},{"name":"calculateTimeAfterGraduationDiscount","basicInfo":{"accessModifier":"public","returnType":"double"},"statementsInfo":{"numberOfStatements":9,"numberOfExecutableStatements":9,"numberOfControlStatements":3,"numberOfReturnStatements":4,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Getting the current date\r\nLocalDate currentYear = LocalDate.now();"},{"type":"EXPRESSION","structure":"// Calculating how many years have passed since the student graduated\r\nint yearsSinceGraduation = currentYear.getYear() - student.getGraduationYear();"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return 0.04;"},{"type":"IF","structure":"if (yearsSinceGraduation <= 5) {\r\n    return 0.04;\r\n    // Fourth range: 5+ years\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.08;"},{"type":"IF","structure":"if (yearsSinceGraduation <= 3) {\r\n    return 0.08;\r\n    // Third range: 3-4 years\r\n} else if (yearsSinceGraduation <= 5) {\r\n    return 0.04;\r\n    // Fourth range: 5+ years\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.15;"},{"type":"IF","structure":"// First range: 0-1 year\r\nif (yearsSinceGraduation <= 1) {\r\n    return 0.15;\r\n    // Second range: 1-2 years\r\n} else if (yearsSinceGraduation <= 3) {\r\n    return 0.08;\r\n    // Third range: 3-4 years\r\n} else if (yearsSinceGraduation <= 5) {\r\n    return 0.04;\r\n    // Fourth range: 5+ years\r\n} else {\r\n    return 0;\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"double","annotations":[]}],"methodMetrics":{"linesOfCode":19,"mcCabeComplexity":4},"methodVariables":[{"name":"currentYear","type":"LocalDate","scope":"local"},{"name":"yearsSinceGraduation","type":"int","scope":"local"}]},{"name":"calculateAverageScoreDiscount","basicInfo":{"accessModifier":"public","returnType":"double"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":3,"numberOfReturnStatements":4,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Getting the average score of the student\r\nint averageScore = student.getAverageGrade();"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return 0.02;"},{"type":"IF","structure":"if (averageScore >= 850) {\r\n    return 0.02;\r\n    // Fourth range: < 850\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.05;"},{"type":"IF","structure":"if (averageScore >= 900) {\r\n    return 0.05;\r\n    // Third range: 850 – 899\r\n} else if (averageScore >= 850) {\r\n    return 0.02;\r\n    // Fourth range: < 850\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.1;"},{"type":"IF","structure":"// First range: 950 – 1000\r\nif (averageScore >= 950) {\r\n    return 0.1;\r\n    // Second range: 900 – 949\r\n} else if (averageScore >= 900) {\r\n    return 0.05;\r\n    // Third range: 850 – 899\r\n} else if (averageScore >= 850) {\r\n    return 0.02;\r\n    // Fourth range: < 850\r\n} else {\r\n    return 0;\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"double","annotations":[]}],"methodMetrics":{"linesOfCode":17,"mcCabeComplexity":4},"methodVariables":[{"name":"averageScore","type":"int","scope":"local"}]},{"name":"calculateAnnualCostInstallments","basicInfo":{"accessModifier":"public","returnType":"double"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":1,"numberOfReturnStatements":2,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Getting the annual cost\r\nint annualCost = enrollmentCost + annualDuty;"},{"type":"EXPRESSION","structure":"// Getting the discounts\r\ndouble schoolTypeDis = calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"double timeAfterGraduationDis = calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"double averageScoreDis = calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"// Calculating the final price\r\nint finalPrice = (int) (annualCost * (1 - schoolTypeDis - timeAfterGraduationDis - averageScoreDis));"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return finalPrice;"},{"type":"IF","structure":"// Adding a validation to avoid trouble\r\nif (isValidStudent(student)) {\r\n    return finalPrice;\r\n} else {\r\n    return 0;\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"double","annotations":[]}],"methodMetrics":{"linesOfCode":16,"mcCabeComplexity":2},"methodVariables":[{"name":"annualCost","type":"int","scope":"local"},{"name":"schoolTypeDis","type":"double","scope":"local"},{"name":"timeAfterGraduationDis","type":"double","scope":"local"},{"name":"averageScoreDis","type":"double","scope":"local"},{"name":"finalPrice","type":"int","scope":"local"}]},{"name":"calculateFinalCost","basicInfo":{"accessModifier":"public","returnType":"int"},"statementsInfo":{"numberOfStatements":3,"numberOfExecutableStatements":3,"numberOfControlStatements":1,"numberOfReturnStatements":2,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return (int) calculateAnnualCostInstallments(student);"},{"type":"RETURN","structure":"return (int) calculateAnnualCostCash(student);"},{"type":"IF","structure":"if (student.getAgreedInstallments() == 1) {\r\n    return (int) calculateAnnualCostCash(student);\r\n} else {\r\n    return (int) calculateAnnualCostInstallments(student);\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"int","annotations":[]}],"methodMetrics":{"linesOfCode":7,"mcCabeComplexity":2},"methodVariables":[]},{"name":"calculateGeneralInterest","basicInfo":{"accessModifier":"public","returnType":"double"},"statementsInfo":{"numberOfStatements":14,"numberOfExecutableStatements":14,"numberOfControlStatements":1,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Update the overdue installments\r\ninstallmentService.updateInstallmentsOverdueStatusByRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Get the overdue installments\r\nList<InstallmentEntity> overdueInstallments = installmentService.findAllOverdueInstallmentsByRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// if there are overdue installments, calculate the interest and update the installment amount\r\nint overdueInstallmentsSize = overdueInstallments.size();"},{"type":"EXPRESSION","structure":"// Update the overdue installments\r\nstudent.setOverdueInstallments(overdueInstallmentsSize);"},{"type":"EXPRESSION","structure":"double interest = 0;"},{"type":"EXPRESSION","structure":"0.03;"},{"type":"EXPRESSION","structure":"0.06;"},{"type":"EXPRESSION","structure":"0.09;"},{"type":"EXPRESSION","structure":"0.15;"},{"type":"EXPRESSION","structure":"// Calculate the interest\r\ninterest = switch(overdueInstallmentsSize) {\r\n    case 1 ->\r\n        0.03;\r\n    case 2 ->\r\n        0.06;\r\n    case 3 ->\r\n        0.09;\r\n    default ->\r\n        0.15;\r\n};"},{"type":"IF","structure":"if (!overdueInstallments.isEmpty()) {\r\n    // Calculate the interest\r\n    interest = switch(overdueInstallmentsSize) {\r\n        case 1 ->\r\n            0.03;\r\n        case 2 ->\r\n            0.06;\r\n        case 3 ->\r\n            0.09;\r\n        default ->\r\n            0.15;\r\n    };\r\n}"},{"type":"EXPRESSION","structure":"// Update every installment overdue price\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice((int) (installment.getInstallmentAmount() * interest));"},{"type":"RETURN","structure":"return interest;"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"double","annotations":[]}],"methodMetrics":{"linesOfCode":26,"mcCabeComplexity":2},"methodVariables":[{"name":"overdueInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"overdueInstallmentsSize","type":"int","scope":"local"},{"name":"interest","type":"double","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}]},{"name":"updateStudentNumbers","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":15,"numberOfExecutableStatements":15,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Get an array of the installments that match the RUT of the student\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Calculate the total amount paid and paid installments\r\nint totalAmountPaid = 0;"},{"type":"EXPRESSION","structure":"int paidInstallments = 0;"},{"type":"EXPRESSION","structure":"totalAmountPaid += (installment.getInstallmentAmount() + installment.getInstallmentOverduePrice());"},{"type":"EXPRESSION","structure":"paidInstallments++;"},{"type":"IF","structure":"if (installment.getInstallmentStatus() == 1) {\r\n    totalAmountPaid += (installment.getInstallmentAmount() + installment.getInstallmentOverduePrice());\r\n    paidInstallments++;\r\n}"},{"type":"EXPRESSION","structure":"// Update the total amount paid and paid installments\r\nstudent.setTotalAmountPaid(totalAmountPaid);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(paidInstallments);"},{"type":"EXPRESSION","structure":"// Calculate the total amount to pay\r\nint totalAmountToPay = calculateFinalCost(student);"},{"type":"EXPRESSION","structure":"double interest = calculateGeneralInterest(student);"},{"type":"EXPRESSION","structure":"totalAmountToPay = (int) (totalAmountToPay * (1 + interest));"},{"type":"EXPRESSION","structure":"// Update the total amount to pay\r\nstudent.setTotalAmountToPay(totalAmountToPay);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"IF","structure":"// Update payment method (more efficient if it is done here)\r\nif (student.getAgreedInstallments() == 1) {\r\n    student.setPaymentMethod(\"Cash\");\r\n} else {\r\n    student.setPaymentMethod(\"Installments\");\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":30,"mcCabeComplexity":3},"methodVariables":[{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"totalAmountPaid","type":"int","scope":"local"},{"name":"paidInstallments","type":"int","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"totalAmountToPay","type":"int","scope":"local"},{"name":"interest","type":"double","scope":"local"}]},{"name":"updateLastPaymentDate","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":7,"numberOfExecutableStatements":7,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Get the paid installments of the student\r\nList<InstallmentEntity> paidInstallments = installmentService.findAllPaidInstallmentsByRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Get the payment date of the closest installment to the current date\r\nLocalDate closestPaymentDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);"},{"type":"EXPRESSION","structure":"closestPaymentDate = installment.getInstallmentPaymentDate();"},{"type":"IF","structure":"if (installment.getInstallmentPaymentDate().isAfter(closestPaymentDate)) {\r\n    closestPaymentDate = installment.getInstallmentPaymentDate();\r\n}"},{"type":"EXPRESSION","structure":"student.setLastPaymentDate(null);"},{"type":"EXPRESSION","structure":"student.setLastPaymentDate(closestPaymentDate);"},{"type":"IF","structure":"// Update the last payment date\r\nif (!paidInstallments.isEmpty()) {\r\n    student.setLastPaymentDate(closestPaymentDate);\r\n} else {\r\n    student.setLastPaymentDate(null);\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":17,"mcCabeComplexity":3},"methodVariables":[{"name":"paidInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"closestPaymentDate","type":"LocalDate","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}]},{"name":"checkMissingInstallments","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":3,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Calculate the maximum number of installments\r\nint maxInstallments = calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"// Get the number of installments agreed by the student\r\nint agreedInstallments = student.getAgreedInstallments();"},{"type":"EXPRESSION","structure":"agreedInstallments = maxInstallments;"},{"type":"IF","structure":"// Verify if the number of installments agreed by the student is valid\r\nif (agreedInstallments > maxInstallments) {\r\n    agreedInstallments = maxInstallments;\r\n}"},{"type":"EXPRESSION","structure":"// Get an array of the installments that match the RUT of the student\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Calculate the number of installments that are missing\r\nint missingInstallments = agreedInstallments - installments.size();"},{"type":"EXPRESSION","structure":"// Create a new installment\r\nInstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Set the amount of the installment\r\ninstallment.setInstallmentAmount(calculateFinalCost(student) / agreedInstallments);"},{"type":"EXPRESSION","structure":"// Set the payment date of the installment (starting from the 5th on january)\r\nLocalDate startDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(startDate.plusMonths(i));"},{"type":"EXPRESSION","structure":"// Set the status - Installment status: 0 -> Pending, 1 -> Paid\r\ninstallment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installmentService.updateInstallmentOverdueStatus(installment);"},{"type":"EXPRESSION","structure":"// Set the overdue price\r\ninstallment.setInstallmentOverduePrice(0);"},{"type":"EXPRESSION","structure":"// Save the installment\r\ninstallmentService.saveInstallment(installment);"},{"type":"FOR","structure":"// Generate the missing installments\r\nfor (int i = 0; i < missingInstallments; i++) {\r\n    // Create a new installment\r\n    InstallmentEntity installment = new InstallmentEntity();\r\n    installment.setInstallmentRUT(student.getRut());\r\n    // Set the amount of the installment\r\n    installment.setInstallmentAmount(calculateFinalCost(student) / agreedInstallments);\r\n    // Set the payment date of the installment (starting from the 5th on january)\r\n    LocalDate startDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);\r\n    installment.setInstallmentPaymentDate(startDate.plusMonths(i));\r\n    // Set the status - Installment status: 0 -> Pending, 1 -> Paid\r\n    installment.setInstallmentStatus(0);\r\n    installmentService.updateInstallmentOverdueStatus(installment);\r\n    // Set the overdue price\r\n    installment.setInstallmentOverduePrice(0);\r\n    // Save the installment\r\n    installmentService.saveInstallment(installment);\r\n}"},{"type":"IF","structure":"// Verify if there are missing installments\r\nif (missingInstallments > 0) {\r\n    // Generate the missing installments\r\n    for (int i = 0; i < missingInstallments; i++) {\r\n        // Create a new installment\r\n        InstallmentEntity installment = new InstallmentEntity();\r\n        installment.setInstallmentRUT(student.getRut());\r\n        // Set the amount of the installment\r\n        installment.setInstallmentAmount(calculateFinalCost(student) / agreedInstallments);\r\n        // Set the payment date of the installment (starting from the 5th on january)\r\n        LocalDate startDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);\r\n        installment.setInstallmentPaymentDate(startDate.plusMonths(i));\r\n        // Set the status - Installment status: 0 -> Pending, 1 -> Paid\r\n        installment.setInstallmentStatus(0);\r\n        installmentService.updateInstallmentOverdueStatus(installment);\r\n        // Set the overdue price\r\n        installment.setInstallmentOverduePrice(0);\r\n        // Save the installment\r\n        installmentService.saveInstallment(installment);\r\n    }\r\n}"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":37,"mcCabeComplexity":4},"methodVariables":[{"name":"maxInstallments","type":"int","scope":"local"},{"name":"agreedInstallments","type":"int","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"missingInstallments","type":"int","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"startDate","type":"LocalDate","scope":"local"},{"name":"i","type":"int","scope":"local"}]},{"name":"updateStudent","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":4,"numberOfExecutableStatements":4,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Check if there are missing installments\r\ncheckMissingInstallments(student);"},{"type":"EXPRESSION","structure":"// Apply the interest if needed\r\ncalculateGeneralInterest(student);"},{"type":"EXPRESSION","structure":"// Update the total amount paid\r\nupdateStudentNumbers(student);"},{"type":"EXPRESSION","structure":"// Update the last payment date\r\nupdateLastPaymentDate(student);"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":10,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student´s parameters are valid\r\n// Verify if the student has a valid rut\r\nif (student.getRut() == null || student.getRut().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid first name\r\nif (student.getFirstName() == null || student.getFirstName().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student last name\r\nif (student.getLastName() == null || student.getLastName().isBlank()) {\r\n    return false;\r\n}"},{"type":"EXPRESSION","structure":"// Verify if the student´s birthdate is valid\r\nLocalDate currentDate = LocalDate.now();"},{"type":"EXPRESSION","structure":"int currentYear = java.time.LocalDate.now().getYear();"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"if (student.getBirthDate() == null || student.getBirthDate().isAfter(currentDate) || (currentYear - student.getBirthDate().getYear() > 100)) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid school type\r\nif (!(student.getSchoolType() == 0 || student.getSchoolType() == 1 || student.getSchoolType() == 2)) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid graduation year\r\nif (student.getGraduationYear() < 1900 || (student.getGraduationYear() > currentYear)) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return true;"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student´s parameters are valid\r\n// Verify if the student has a valid rut\r\nif (studentScore.getScoreRUT() == null || studentScore.getScoreRUT().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student has a valid score\r\nif (studentScore.getScore() < 0 || studentScore.getScore() > 1000) {\r\n    return false;\r\n}"},{"type":"EXPRESSION","structure":"// Verify if the exam date is from this year\r\nLocalDate currentDate = LocalDate.now();"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"if (studentScore.getExamDate() == null || (studentScore.getExamDate().isAfter(currentDate))) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student name is valid\r\nif (studentScore.getStudentName() == null || studentScore.getStudentName().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return false;"},{"type":"IF","structure":"// Verify if the student lastname is valid\r\nif (studentScore.getStudentLastName() == null || studentScore.getStudentLastName().isBlank()) {\r\n    return false;\r\n}"},{"type":"RETURN","structure":"return true;"},{"type":"EXPRESSION","structure":"// Getting the school type of the student\r\nint schoolType = student.getSchoolType();"},{"type":"EXPRESSION","structure":"int maxInstallments = 0;"},{"type":"EXPRESSION","structure":"maxInstallments = 4;"},{"type":"IF","structure":"if (schoolType == 2) {\r\n    maxInstallments = 4;\r\n}"},{"type":"EXPRESSION","structure":"maxInstallments = 7;"},{"type":"IF","structure":"if (schoolType == 1) {\r\n    maxInstallments = 7;\r\n} else if (schoolType == 2) {\r\n    maxInstallments = 4;\r\n}"},{"type":"EXPRESSION","structure":"maxInstallments = 10;"},{"type":"IF","structure":"// School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\nif (schoolType == 0) {\r\n    maxInstallments = 10;\r\n} else if (schoolType == 1) {\r\n    maxInstallments = 7;\r\n} else if (schoolType == 2) {\r\n    maxInstallments = 4;\r\n}"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return maxInstallments;"},{"type":"IF","structure":"// Adding a validation to avoid trouble\r\nif (isValidStudent(student)) {\r\n    return maxInstallments;\r\n} else {\r\n    return 0;\r\n}"},{"type":"EXPRESSION","structure":"double finalPrice = (enrollmentCost + annualDuty) * 0.5;"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return finalPrice;"},{"type":"IF","structure":"// Adding a validation to avoid trouble\r\nif (isValidStudent(student)) {\r\n    return finalPrice;\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return 0;"},{"type":"IF","structure":"if (student.getSchoolType() == 2) {\r\n    return 0;\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.1;"},{"type":"IF","structure":"if (student.getSchoolType() == 1) {\r\n    return 0.1;\r\n} else if (student.getSchoolType() == 2) {\r\n    return 0;\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.2;"},{"type":"IF","structure":"if (student.getSchoolType() == 0) {\r\n    return 0.2;\r\n} else if (student.getSchoolType() == 1) {\r\n    return 0.1;\r\n} else if (student.getSchoolType() == 2) {\r\n    return 0;\r\n} else {\r\n    return 0;\r\n}"},{"type":"EXPRESSION","structure":"// Getting the current date\r\nLocalDate currentYear = LocalDate.now();"},{"type":"EXPRESSION","structure":"// Calculating how many years have passed since the student graduated\r\nint yearsSinceGraduation = currentYear.getYear() - student.getGraduationYear();"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return 0.04;"},{"type":"IF","structure":"if (yearsSinceGraduation <= 5) {\r\n    return 0.04;\r\n    // Fourth range: 5+ years\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.08;"},{"type":"IF","structure":"if (yearsSinceGraduation <= 3) {\r\n    return 0.08;\r\n    // Third range: 3-4 years\r\n} else if (yearsSinceGraduation <= 5) {\r\n    return 0.04;\r\n    // Fourth range: 5+ years\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.15;"},{"type":"IF","structure":"// First range: 0-1 year\r\nif (yearsSinceGraduation <= 1) {\r\n    return 0.15;\r\n    // Second range: 1-2 years\r\n} else if (yearsSinceGraduation <= 3) {\r\n    return 0.08;\r\n    // Third range: 3-4 years\r\n} else if (yearsSinceGraduation <= 5) {\r\n    return 0.04;\r\n    // Fourth range: 5+ years\r\n} else {\r\n    return 0;\r\n}"},{"type":"EXPRESSION","structure":"// Getting the average score of the student\r\nint averageScore = student.getAverageGrade();"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return 0.02;"},{"type":"IF","structure":"if (averageScore >= 850) {\r\n    return 0.02;\r\n    // Fourth range: < 850\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.05;"},{"type":"IF","structure":"if (averageScore >= 900) {\r\n    return 0.05;\r\n    // Third range: 850 – 899\r\n} else if (averageScore >= 850) {\r\n    return 0.02;\r\n    // Fourth range: < 850\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return 0.1;"},{"type":"IF","structure":"// First range: 950 – 1000\r\nif (averageScore >= 950) {\r\n    return 0.1;\r\n    // Second range: 900 – 949\r\n} else if (averageScore >= 900) {\r\n    return 0.05;\r\n    // Third range: 850 – 899\r\n} else if (averageScore >= 850) {\r\n    return 0.02;\r\n    // Fourth range: < 850\r\n} else {\r\n    return 0;\r\n}"},{"type":"EXPRESSION","structure":"// Getting the annual cost\r\nint annualCost = enrollmentCost + annualDuty;"},{"type":"EXPRESSION","structure":"// Getting the discounts\r\ndouble schoolTypeDis = calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"double timeAfterGraduationDis = calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"double averageScoreDis = calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"// Calculating the final price\r\nint finalPrice = (int) (annualCost * (1 - schoolTypeDis - timeAfterGraduationDis - averageScoreDis));"},{"type":"RETURN","structure":"return 0;"},{"type":"RETURN","structure":"return finalPrice;"},{"type":"IF","structure":"// Adding a validation to avoid trouble\r\nif (isValidStudent(student)) {\r\n    return finalPrice;\r\n} else {\r\n    return 0;\r\n}"},{"type":"RETURN","structure":"return (int) calculateAnnualCostInstallments(student);"},{"type":"RETURN","structure":"return (int) calculateAnnualCostCash(student);"},{"type":"IF","structure":"if (student.getAgreedInstallments() == 1) {\r\n    return (int) calculateAnnualCostCash(student);\r\n} else {\r\n    return (int) calculateAnnualCostInstallments(student);\r\n}"},{"type":"EXPRESSION","structure":"// Update the overdue installments\r\ninstallmentService.updateInstallmentsOverdueStatusByRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Get the overdue installments\r\nList<InstallmentEntity> overdueInstallments = installmentService.findAllOverdueInstallmentsByRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// if there are overdue installments, calculate the interest and update the installment amount\r\nint overdueInstallmentsSize = overdueInstallments.size();"},{"type":"EXPRESSION","structure":"// Update the overdue installments\r\nstudent.setOverdueInstallments(overdueInstallmentsSize);"},{"type":"EXPRESSION","structure":"double interest = 0;"},{"type":"EXPRESSION","structure":"0.03;"},{"type":"EXPRESSION","structure":"0.06;"},{"type":"EXPRESSION","structure":"0.09;"},{"type":"EXPRESSION","structure":"0.15;"},{"type":"EXPRESSION","structure":"// Calculate the interest\r\ninterest = switch(overdueInstallmentsSize) {\r\n    case 1 ->\r\n        0.03;\r\n    case 2 ->\r\n        0.06;\r\n    case 3 ->\r\n        0.09;\r\n    default ->\r\n        0.15;\r\n};"},{"type":"IF","structure":"if (!overdueInstallments.isEmpty()) {\r\n    // Calculate the interest\r\n    interest = switch(overdueInstallmentsSize) {\r\n        case 1 ->\r\n            0.03;\r\n        case 2 ->\r\n            0.06;\r\n        case 3 ->\r\n            0.09;\r\n        default ->\r\n            0.15;\r\n    };\r\n}"},{"type":"EXPRESSION","structure":"// Update every installment overdue price\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice((int) (installment.getInstallmentAmount() * interest));"},{"type":"RETURN","structure":"return interest;"},{"type":"EXPRESSION","structure":"// Get an array of the installments that match the RUT of the student\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Calculate the total amount paid and paid installments\r\nint totalAmountPaid = 0;"},{"type":"EXPRESSION","structure":"int paidInstallments = 0;"},{"type":"EXPRESSION","structure":"totalAmountPaid += (installment.getInstallmentAmount() + installment.getInstallmentOverduePrice());"},{"type":"EXPRESSION","structure":"paidInstallments++;"},{"type":"IF","structure":"if (installment.getInstallmentStatus() == 1) {\r\n    totalAmountPaid += (installment.getInstallmentAmount() + installment.getInstallmentOverduePrice());\r\n    paidInstallments++;\r\n}"},{"type":"EXPRESSION","structure":"// Update the total amount paid and paid installments\r\nstudent.setTotalAmountPaid(totalAmountPaid);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(paidInstallments);"},{"type":"EXPRESSION","structure":"// Calculate the total amount to pay\r\nint totalAmountToPay = calculateFinalCost(student);"},{"type":"EXPRESSION","structure":"double interest = calculateGeneralInterest(student);"},{"type":"EXPRESSION","structure":"totalAmountToPay = (int) (totalAmountToPay * (1 + interest));"},{"type":"EXPRESSION","structure":"// Update the total amount to pay\r\nstudent.setTotalAmountToPay(totalAmountToPay);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"IF","structure":"// Update payment method (more efficient if it is done here)\r\nif (student.getAgreedInstallments() == 1) {\r\n    student.setPaymentMethod(\"Cash\");\r\n} else {\r\n    student.setPaymentMethod(\"Installments\");\r\n}"},{"type":"EXPRESSION","structure":"// Get the paid installments of the student\r\nList<InstallmentEntity> paidInstallments = installmentService.findAllPaidInstallmentsByRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Get the payment date of the closest installment to the current date\r\nLocalDate closestPaymentDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);"},{"type":"EXPRESSION","structure":"closestPaymentDate = installment.getInstallmentPaymentDate();"},{"type":"IF","structure":"if (installment.getInstallmentPaymentDate().isAfter(closestPaymentDate)) {\r\n    closestPaymentDate = installment.getInstallmentPaymentDate();\r\n}"},{"type":"EXPRESSION","structure":"student.setLastPaymentDate(null);"},{"type":"EXPRESSION","structure":"student.setLastPaymentDate(closestPaymentDate);"},{"type":"IF","structure":"// Update the last payment date\r\nif (!paidInstallments.isEmpty()) {\r\n    student.setLastPaymentDate(closestPaymentDate);\r\n} else {\r\n    student.setLastPaymentDate(null);\r\n}"},{"type":"EXPRESSION","structure":"// Calculate the maximum number of installments\r\nint maxInstallments = calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"// Get the number of installments agreed by the student\r\nint agreedInstallments = student.getAgreedInstallments();"},{"type":"EXPRESSION","structure":"agreedInstallments = maxInstallments;"},{"type":"IF","structure":"// Verify if the number of installments agreed by the student is valid\r\nif (agreedInstallments > maxInstallments) {\r\n    agreedInstallments = maxInstallments;\r\n}"},{"type":"EXPRESSION","structure":"// Get an array of the installments that match the RUT of the student\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Calculate the number of installments that are missing\r\nint missingInstallments = agreedInstallments - installments.size();"},{"type":"EXPRESSION","structure":"// Create a new installment\r\nInstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Set the amount of the installment\r\ninstallment.setInstallmentAmount(calculateFinalCost(student) / agreedInstallments);"},{"type":"EXPRESSION","structure":"// Set the payment date of the installment (starting from the 5th on january)\r\nLocalDate startDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(startDate.plusMonths(i));"},{"type":"EXPRESSION","structure":"// Set the status - Installment status: 0 -> Pending, 1 -> Paid\r\ninstallment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installmentService.updateInstallmentOverdueStatus(installment);"},{"type":"EXPRESSION","structure":"// Set the overdue price\r\ninstallment.setInstallmentOverduePrice(0);"},{"type":"EXPRESSION","structure":"// Save the installment\r\ninstallmentService.saveInstallment(installment);"},{"type":"FOR","structure":"// Generate the missing installments\r\nfor (int i = 0; i < missingInstallments; i++) {\r\n    // Create a new installment\r\n    InstallmentEntity installment = new InstallmentEntity();\r\n    installment.setInstallmentRUT(student.getRut());\r\n    // Set the amount of the installment\r\n    installment.setInstallmentAmount(calculateFinalCost(student) / agreedInstallments);\r\n    // Set the payment date of the installment (starting from the 5th on january)\r\n    LocalDate startDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);\r\n    installment.setInstallmentPaymentDate(startDate.plusMonths(i));\r\n    // Set the status - Installment status: 0 -> Pending, 1 -> Paid\r\n    installment.setInstallmentStatus(0);\r\n    installmentService.updateInstallmentOverdueStatus(installment);\r\n    // Set the overdue price\r\n    installment.setInstallmentOverduePrice(0);\r\n    // Save the installment\r\n    installmentService.saveInstallment(installment);\r\n}"},{"type":"IF","structure":"// Verify if there are missing installments\r\nif (missingInstallments > 0) {\r\n    // Generate the missing installments\r\n    for (int i = 0; i < missingInstallments; i++) {\r\n        // Create a new installment\r\n        InstallmentEntity installment = new InstallmentEntity();\r\n        installment.setInstallmentRUT(student.getRut());\r\n        // Set the amount of the installment\r\n        installment.setInstallmentAmount(calculateFinalCost(student) / agreedInstallments);\r\n        // Set the payment date of the installment (starting from the 5th on january)\r\n        LocalDate startDate = LocalDate.of(LocalDate.now().getYear(), 1, 5);\r\n        installment.setInstallmentPaymentDate(startDate.plusMonths(i));\r\n        // Set the status - Installment status: 0 -> Pending, 1 -> Paid\r\n        installment.setInstallmentStatus(0);\r\n        installmentService.updateInstallmentOverdueStatus(installment);\r\n        // Set the overdue price\r\n        installment.setInstallmentOverduePrice(0);\r\n        // Save the installment\r\n        installmentService.saveInstallment(installment);\r\n    }\r\n}"},{"type":"EXPRESSION","structure":"// Check if there are missing installments\r\ncheckMissingInstallments(student);"},{"type":"EXPRESSION","structure":"// Apply the interest if needed\r\ncalculateGeneralInterest(student);"},{"type":"EXPRESSION","structure":"// Update the total amount paid\r\nupdateStudentNumbers(student);"},{"type":"EXPRESSION","structure":"// Update the last payment date\r\nupdateLastPaymentDate(student);"}],"classVariables":[{"name":"installmentService","type":"InstallmentService","scope":"instance"},{"name":"enrollmentCost","type":"int","scope":"instance"},{"name":"annualDuty","type":"int","scope":"instance"},{"name":"currentDate","type":"LocalDate","scope":"local"},{"name":"currentYear","type":"int","scope":"local"},{"name":"currentDate","type":"LocalDate","scope":"local"},{"name":"schoolType","type":"int","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"},{"name":"finalPrice","type":"double","scope":"local"},{"name":"currentYear","type":"LocalDate","scope":"local"},{"name":"yearsSinceGraduation","type":"int","scope":"local"},{"name":"averageScore","type":"int","scope":"local"},{"name":"annualCost","type":"int","scope":"local"},{"name":"schoolTypeDis","type":"double","scope":"local"},{"name":"timeAfterGraduationDis","type":"double","scope":"local"},{"name":"averageScoreDis","type":"double","scope":"local"},{"name":"finalPrice","type":"int","scope":"local"},{"name":"overdueInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"overdueInstallmentsSize","type":"int","scope":"local"},{"name":"interest","type":"double","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"totalAmountPaid","type":"int","scope":"local"},{"name":"paidInstallments","type":"int","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"totalAmountToPay","type":"int","scope":"local"},{"name":"interest","type":"double","scope":"local"},{"name":"paidInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"closestPaymentDate","type":"LocalDate","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"},{"name":"agreedInstallments","type":"int","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"missingInstallments","type":"int","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"startDate","type":"LocalDate","scope":"local"},{"name":"i","type":"int","scope":"local"}],"innerClasses":[],"usedClasses":["StudentScoreEntity","boolean","void","double","StudentEntity","InstallmentService","int"],"classDependencies":["StudentScoreEntity","StudentEntity","InstallmentService"],"dependentClasses":["FileManagerController","StudentController","FileManagerService"],"genericUsages":null,"exceptionHandling":[],"linesOfCode":340},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":134,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate","java.util.List"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Service"],"INTERNAL":["TopEducation.TopEducationApp.entities.InstallmentEntity","TopEducation.TopEducationApp.entities.StudentEntity","TopEducation.TopEducationApp.entities.StudentScoreEntity"],"EXTERNAL_UNKNOWN":["lombok.Generated"]},"programMetrics":{"numberOfMethods":14,"sumOfExecutableStatements":134,"maxInputParameters":1,"maxOutputParameters":1,"linesOfCode":340},"complexityMetrics":{"approxMcCabeCC":73,"maxMethodMcCabeCC":26,"improvedCC":0.4411764705882353},"couplingMetrics":{"afferentCoupling":3,"efferentCoupling":3,"instability":0.5},"cohesionMetrics":{"lackOfCohesion1":91,"lackOfCohesion2":91,"lackOfCohesion3":14,"lackOfCohesion4":14,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"FileManagerService","javaFileType":"CLASS","layerAnnotation":"SERVICE","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Autowired","Autowired","Generated","Generated","Generated","Service"],"constructors":[],"methods":[{"name":"saveExcelDataStudent","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":28,"numberOfExecutableStatements":27,"numberOfControlStatements":6,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"EXPRESSION","structure":"Sheet sheet = workbook.getSheetAt(0);"},{"type":"IF","structure":"if (currentRow.getRowNum() == 0) {\r\n    // Skip header row\r\n    continue;\r\n}"},{"type":"EXPRESSION","structure":"// Getting the student values from the Excel file\r\n// Just for testing purposes (the values are printed in the console)\r\nString rut = currentRow.getCell(1).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(rut);\r\nString firstName = currentRow.getCell(2).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(firstName);\r\nString lastName = currentRow.getCell(3).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(lastName);\r\n// Date format is dd-mm-yyyy\r\n// The date is converted to LocalDate format\r\nLocalDate birthDate = currentRow.getCell(4).getLocalDateTimeCellValue().toLocalDate();"},{"type":"EXPRESSION","structure":"// System.out.println(birthDate);\r\nString schoolName = currentRow.getCell(5).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(schoolName);\r\nString schoolType = currentRow.getCell(6).getStringCellValue();"},{"type":"EXPRESSION","structure":"// School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\nint schoolTypeInt = 0;"},{"type":"EXPRESSION","structure":"schoolTypeInt = 1;"},{"type":"EXPRESSION","structure":"schoolTypeInt = 2;"},{"type":"SWITCH","structure":"switch(schoolType) {\r\n    case \"Municipal\" ->\r\n        {\r\n        }\r\n    case \"Subvencionado\" ->\r\n        schoolTypeInt = 1;\r\n    case \"Particular\" ->\r\n        schoolTypeInt = 2;\r\n}"},{"type":"EXPRESSION","structure":"// System.out.println(schoolType);\r\nint graduationYear = (int) currentRow.getCell(7).getNumericCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(graduationYear);\r\nint agreedInstallments = (int) currentRow.getCell(8).getNumericCellValue();"},{"type":"EXPRESSION","structure":"// Create a new student object\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(rut);"},{"type":"EXPRESSION","structure":"student.setFirstName(firstName);"},{"type":"EXPRESSION","structure":"student.setLastName(lastName);"},{"type":"EXPRESSION","structure":"student.setBirthDate(birthDate);"},{"type":"EXPRESSION","structure":"student.setSchoolType(schoolTypeInt);"},{"type":"EXPRESSION","structure":"student.setSchoolName(schoolName);"},{"type":"EXPRESSION","structure":"student.setGraduationYear(graduationYear);"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(agreedInstallments);"},{"type":"EXPRESSION","structure":"// Save the student to the database\r\nstudentService.saveStudent(student);"},{"type":"IF","structure":"// Verify if the student is valid before saving it to the database\r\nif (administrationOffice.isValidStudent(student)) {\r\n    // Save the student to the database\r\n    studentService.saveStudent(student);\r\n}"},{"type":"TRY","structure":"try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n    Sheet sheet = workbook.getSheetAt(0);\r\n    // Getting the students from the Excel file\r\n    for (Row currentRow : sheet) {\r\n        if (currentRow.getRowNum() == 0) {\r\n            // Skip header row\r\n            continue;\r\n        }\r\n        // Getting the student values from the Excel file\r\n        // Just for testing purposes (the values are printed in the console)\r\n        String rut = currentRow.getCell(1).getStringCellValue();\r\n        // System.out.println(rut);\r\n        String firstName = currentRow.getCell(2).getStringCellValue();\r\n        // System.out.println(firstName);\r\n        String lastName = currentRow.getCell(3).getStringCellValue();\r\n        // System.out.println(lastName);\r\n        // Date format is dd-mm-yyyy\r\n        // The date is converted to LocalDate format\r\n        LocalDate birthDate = currentRow.getCell(4).getLocalDateTimeCellValue().toLocalDate();\r\n        // System.out.println(birthDate);\r\n        String schoolName = currentRow.getCell(5).getStringCellValue();\r\n        // System.out.println(schoolName);\r\n        String schoolType = currentRow.getCell(6).getStringCellValue();\r\n        // School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\n        int schoolTypeInt = 0;\r\n        switch(schoolType) {\r\n            case \"Municipal\" ->\r\n                {\r\n                }\r\n            case \"Subvencionado\" ->\r\n                schoolTypeInt = 1;\r\n            case \"Particular\" ->\r\n                schoolTypeInt = 2;\r\n        }\r\n        // System.out.println(schoolType);\r\n        int graduationYear = (int) currentRow.getCell(7).getNumericCellValue();\r\n        // System.out.println(graduationYear);\r\n        int agreedInstallments = (int) currentRow.getCell(8).getNumericCellValue();\r\n        // Create a new student object\r\n        StudentEntity student = new StudentEntity();\r\n        student.setRut(rut);\r\n        student.setFirstName(firstName);\r\n        student.setLastName(lastName);\r\n        student.setBirthDate(birthDate);\r\n        student.setSchoolType(schoolTypeInt);\r\n        student.setSchoolName(schoolName);\r\n        student.setGraduationYear(graduationYear);\r\n        student.setAgreedInstallments(agreedInstallments);\r\n        // Verify if the student is valid before saving it to the database\r\n        if (administrationOffice.isValidStudent(student)) {\r\n            // Save the student to the database\r\n            studentService.saveStudent(student);\r\n        }\r\n    }\r\n} catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"IF","structure":"// Verify if the Excel file is xlsx type\r\nif (Objects.requireNonNull(file.getOriginalFilename()).endsWith(\".xlsx\")) {\r\n    try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n        Sheet sheet = workbook.getSheetAt(0);\r\n        // Getting the students from the Excel file\r\n        for (Row currentRow : sheet) {\r\n            if (currentRow.getRowNum() == 0) {\r\n                // Skip header row\r\n                continue;\r\n            }\r\n            // Getting the student values from the Excel file\r\n            // Just for testing purposes (the values are printed in the console)\r\n            String rut = currentRow.getCell(1).getStringCellValue();\r\n            // System.out.println(rut);\r\n            String firstName = currentRow.getCell(2).getStringCellValue();\r\n            // System.out.println(firstName);\r\n            String lastName = currentRow.getCell(3).getStringCellValue();\r\n            // System.out.println(lastName);\r\n            // Date format is dd-mm-yyyy\r\n            // The date is converted to LocalDate format\r\n            LocalDate birthDate = currentRow.getCell(4).getLocalDateTimeCellValue().toLocalDate();\r\n            // System.out.println(birthDate);\r\n            String schoolName = currentRow.getCell(5).getStringCellValue();\r\n            // System.out.println(schoolName);\r\n            String schoolType = currentRow.getCell(6).getStringCellValue();\r\n            // School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\n            int schoolTypeInt = 0;\r\n            switch(schoolType) {\r\n                case \"Municipal\" ->\r\n                    {\r\n                    }\r\n                case \"Subvencionado\" ->\r\n                    schoolTypeInt = 1;\r\n                case \"Particular\" ->\r\n                    schoolTypeInt = 2;\r\n            }\r\n            // System.out.println(schoolType);\r\n            int graduationYear = (int) currentRow.getCell(7).getNumericCellValue();\r\n            // System.out.println(graduationYear);\r\n            int agreedInstallments = (int) currentRow.getCell(8).getNumericCellValue();\r\n            // Create a new student object\r\n            StudentEntity student = new StudentEntity();\r\n            student.setRut(rut);\r\n            student.setFirstName(firstName);\r\n            student.setLastName(lastName);\r\n            student.setBirthDate(birthDate);\r\n            student.setSchoolType(schoolTypeInt);\r\n            student.setSchoolName(schoolName);\r\n            student.setGraduationYear(graduationYear);\r\n            student.setAgreedInstallments(agreedInstallments);\r\n            // Verify if the student is valid before saving it to the database\r\n            if (administrationOffice.isValidStudent(student)) {\r\n                // Save the student to the database\r\n                studentService.saveStudent(student);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        // Handle exception\r\n    }\r\n}"}]},"inputParameters":[{"name":"file","type":"MultipartFile","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":74,"mcCabeComplexity":6},"methodVariables":[{"name":"workbook","type":"Workbook","scope":"local"},{"name":"sheet","type":"Sheet","scope":"local"},{"name":"rut","type":"String","scope":"local"},{"name":"firstName","type":"String","scope":"local"},{"name":"lastName","type":"String","scope":"local"},{"name":"birthDate","type":"LocalDate","scope":"local"},{"name":"schoolName","type":"String","scope":"local"},{"name":"schoolType","type":"String","scope":"local"},{"name":"schoolTypeInt","type":"int","scope":"local"},{"name":"graduationYear","type":"int","scope":"local"},{"name":"agreedInstallments","type":"int","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"currentRow","type":"Row","scope":"local"}]},{"name":"saveExcelDataStudentGrade","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":19,"numberOfExecutableStatements":18,"numberOfControlStatements":6,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"EXPRESSION","structure":"Sheet sheet = workbook.getSheetAt(i);"},{"type":"IF","structure":"if (currentRow.getRowNum() == 0) {\r\n    // Skip header row\r\n    continue;\r\n}"},{"type":"EXPRESSION","structure":"// Getting the student grades values from the Excel file\r\n// Just for testing purposes (the values are printed in the console)\r\nString gradeRUT = currentRow.getCell(1).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(gradeRUT);\r\nint score = (int) currentRow.getCell(2).getNumericCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(score);\r\n// Date format is dd-mm-yyyy\r\n// The date is converted to LocalDate format\r\nLocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();"},{"type":"EXPRESSION","structure":"// System.out.println(examDate);\r\nString studentName = currentRow.getCell(4).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(studentName);\r\nString studentLastName = currentRow.getCell(5).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(studentLastName);\r\n// Create a new student grade object\r\nStudentScoreEntity studentGrade = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentGrade.setScoreRUT(gradeRUT);"},{"type":"EXPRESSION","structure":"studentGrade.setScore(score);"},{"type":"EXPRESSION","structure":"studentGrade.setExamDate(examDate);"},{"type":"EXPRESSION","structure":"studentGrade.setStudentName(studentName);"},{"type":"EXPRESSION","structure":"studentGrade.setStudentLastName(studentLastName);"},{"type":"EXPRESSION","structure":"// Save the student grade to the database\r\nstudentScoreService.saveStudentScore(studentGrade);"},{"type":"IF","structure":"// Verify if the student grade is valid before saving it to the database\r\nif (administrationOffice.isValidStudentScore(studentGrade)) {\r\n    // Save the student grade to the database\r\n    studentScoreService.saveStudentScore(studentGrade);\r\n}"},{"type":"FOR","structure":"// Getting all other sheets than the first one\r\nfor (int i = 1; i < workbook.getNumberOfSheets(); i++) {\r\n    Sheet sheet = workbook.getSheetAt(i);\r\n    // Getting the student's grades from the Excel file\r\n    for (Row currentRow : sheet) {\r\n        if (currentRow.getRowNum() == 0) {\r\n            // Skip header row\r\n            continue;\r\n        }\r\n        // Getting the student grades values from the Excel file\r\n        // Just for testing purposes (the values are printed in the console)\r\n        String gradeRUT = currentRow.getCell(1).getStringCellValue();\r\n        // System.out.println(gradeRUT);\r\n        int score = (int) currentRow.getCell(2).getNumericCellValue();\r\n        // System.out.println(score);\r\n        // Date format is dd-mm-yyyy\r\n        // The date is converted to LocalDate format\r\n        LocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();\r\n        // System.out.println(examDate);\r\n        String studentName = currentRow.getCell(4).getStringCellValue();\r\n        // System.out.println(studentName);\r\n        String studentLastName = currentRow.getCell(5).getStringCellValue();\r\n        // System.out.println(studentLastName);\r\n        // Create a new student grade object\r\n        StudentScoreEntity studentGrade = new StudentScoreEntity();\r\n        studentGrade.setScoreRUT(gradeRUT);\r\n        studentGrade.setScore(score);\r\n        studentGrade.setExamDate(examDate);\r\n        studentGrade.setStudentName(studentName);\r\n        studentGrade.setStudentLastName(studentLastName);\r\n        // Verify if the student grade is valid before saving it to the database\r\n        if (administrationOffice.isValidStudentScore(studentGrade)) {\r\n            // Save the student grade to the database\r\n            studentScoreService.saveStudentScore(studentGrade);\r\n        }\r\n    }\r\n}"},{"type":"TRY","structure":"try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n    // Getting all other sheets than the first one\r\n    for (int i = 1; i < workbook.getNumberOfSheets(); i++) {\r\n        Sheet sheet = workbook.getSheetAt(i);\r\n        // Getting the student's grades from the Excel file\r\n        for (Row currentRow : sheet) {\r\n            if (currentRow.getRowNum() == 0) {\r\n                // Skip header row\r\n                continue;\r\n            }\r\n            // Getting the student grades values from the Excel file\r\n            // Just for testing purposes (the values are printed in the console)\r\n            String gradeRUT = currentRow.getCell(1).getStringCellValue();\r\n            // System.out.println(gradeRUT);\r\n            int score = (int) currentRow.getCell(2).getNumericCellValue();\r\n            // System.out.println(score);\r\n            // Date format is dd-mm-yyyy\r\n            // The date is converted to LocalDate format\r\n            LocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();\r\n            // System.out.println(examDate);\r\n            String studentName = currentRow.getCell(4).getStringCellValue();\r\n            // System.out.println(studentName);\r\n            String studentLastName = currentRow.getCell(5).getStringCellValue();\r\n            // System.out.println(studentLastName);\r\n            // Create a new student grade object\r\n            StudentScoreEntity studentGrade = new StudentScoreEntity();\r\n            studentGrade.setScoreRUT(gradeRUT);\r\n            studentGrade.setScore(score);\r\n            studentGrade.setExamDate(examDate);\r\n            studentGrade.setStudentName(studentName);\r\n            studentGrade.setStudentLastName(studentLastName);\r\n            // Verify if the student grade is valid before saving it to the database\r\n            if (administrationOffice.isValidStudentScore(studentGrade)) {\r\n                // Save the student grade to the database\r\n                studentScoreService.saveStudentScore(studentGrade);\r\n            }\r\n        }\r\n    }\r\n} catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"IF","structure":"// Verify if the Excel file is xlsx type\r\nif (Objects.requireNonNull(file.getOriginalFilename()).endsWith(\".xlsx\")) {\r\n    try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n        // Getting all other sheets than the first one\r\n        for (int i = 1; i < workbook.getNumberOfSheets(); i++) {\r\n            Sheet sheet = workbook.getSheetAt(i);\r\n            // Getting the student's grades from the Excel file\r\n            for (Row currentRow : sheet) {\r\n                if (currentRow.getRowNum() == 0) {\r\n                    // Skip header row\r\n                    continue;\r\n                }\r\n                // Getting the student grades values from the Excel file\r\n                // Just for testing purposes (the values are printed in the console)\r\n                String gradeRUT = currentRow.getCell(1).getStringCellValue();\r\n                // System.out.println(gradeRUT);\r\n                int score = (int) currentRow.getCell(2).getNumericCellValue();\r\n                // System.out.println(score);\r\n                // Date format is dd-mm-yyyy\r\n                // The date is converted to LocalDate format\r\n                LocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();\r\n                // System.out.println(examDate);\r\n                String studentName = currentRow.getCell(4).getStringCellValue();\r\n                // System.out.println(studentName);\r\n                String studentLastName = currentRow.getCell(5).getStringCellValue();\r\n                // System.out.println(studentLastName);\r\n                // Create a new student grade object\r\n                StudentScoreEntity studentGrade = new StudentScoreEntity();\r\n                studentGrade.setScoreRUT(gradeRUT);\r\n                studentGrade.setScore(score);\r\n                studentGrade.setExamDate(examDate);\r\n                studentGrade.setStudentName(studentName);\r\n                studentGrade.setStudentLastName(studentLastName);\r\n                // Verify if the student grade is valid before saving it to the database\r\n                if (administrationOffice.isValidStudentScore(studentGrade)) {\r\n                    // Save the student grade to the database\r\n                    studentScoreService.saveStudentScore(studentGrade);\r\n                }\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        // Handle exception\r\n    }\r\n}"}]},"inputParameters":[{"name":"file","type":"MultipartFile","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":59,"mcCabeComplexity":6},"methodVariables":[{"name":"workbook","type":"Workbook","scope":"local"},{"name":"sheet","type":"Sheet","scope":"local"},{"name":"gradeRUT","type":"String","scope":"local"},{"name":"score","type":"int","scope":"local"},{"name":"examDate","type":"LocalDate","scope":"local"},{"name":"studentName","type":"String","scope":"local"},{"name":"studentLastName","type":"String","scope":"local"},{"name":"studentGrade","type":"StudentScoreEntity","scope":"local"},{"name":"currentRow","type":"Row","scope":"local"},{"name":"i","type":"int","scope":"local"}]},{"name":"updateStudentsInfo","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":13,"numberOfExecutableStatements":13,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Get all the students\r\nIterable<StudentEntity> students = studentService.getAllStudents();"},{"type":"EXPRESSION","structure":"// Get the student grades\r\nIterable<StudentScoreEntity> studentGrades = studentScoreService.getAllStudentGradesByStudentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Calculate the average score\r\nint averageScore = 0;"},{"type":"EXPRESSION","structure":"int count = 0;"},{"type":"EXPRESSION","structure":"averageScore += studentGrade.getScore();"},{"type":"EXPRESSION","structure":"count++;"},{"type":"EXPRESSION","structure":"averageScore = (averageScore / count);"},{"type":"EXPRESSION","structure":"// Update the student info\r\nstudent.setAverageGrade(averageScore);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(count);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(administrationOffice.calculateFinalCost(student));"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(0);"},{"type":"EXPRESSION","structure":"// Update installments info\r\nadministrationOffice.updateStudent(student);"},{"type":"EXPRESSION","structure":"// Save the student to the database\r\nstudentService.saveStudent(student);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":31,"mcCabeComplexity":1},"methodVariables":[{"name":"students","type":"Iterable<StudentEntity>","scope":"local"},{"name":"studentGrades","type":"Iterable<StudentScoreEntity>","scope":"local"},{"name":"averageScore","type":"int","scope":"local"},{"name":"count","type":"int","scope":"local"},{"name":"studentGrade","type":"StudentScoreEntity","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"}]}],"statements":[{"type":"CATCH","structure":" catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"EXPRESSION","structure":"Sheet sheet = workbook.getSheetAt(0);"},{"type":"IF","structure":"if (currentRow.getRowNum() == 0) {\r\n    // Skip header row\r\n    continue;\r\n}"},{"type":"EXPRESSION","structure":"// Getting the student values from the Excel file\r\n// Just for testing purposes (the values are printed in the console)\r\nString rut = currentRow.getCell(1).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(rut);\r\nString firstName = currentRow.getCell(2).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(firstName);\r\nString lastName = currentRow.getCell(3).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(lastName);\r\n// Date format is dd-mm-yyyy\r\n// The date is converted to LocalDate format\r\nLocalDate birthDate = currentRow.getCell(4).getLocalDateTimeCellValue().toLocalDate();"},{"type":"EXPRESSION","structure":"// System.out.println(birthDate);\r\nString schoolName = currentRow.getCell(5).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(schoolName);\r\nString schoolType = currentRow.getCell(6).getStringCellValue();"},{"type":"EXPRESSION","structure":"// School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\nint schoolTypeInt = 0;"},{"type":"EXPRESSION","structure":"schoolTypeInt = 1;"},{"type":"EXPRESSION","structure":"schoolTypeInt = 2;"},{"type":"SWITCH","structure":"switch(schoolType) {\r\n    case \"Municipal\" ->\r\n        {\r\n        }\r\n    case \"Subvencionado\" ->\r\n        schoolTypeInt = 1;\r\n    case \"Particular\" ->\r\n        schoolTypeInt = 2;\r\n}"},{"type":"EXPRESSION","structure":"// System.out.println(schoolType);\r\nint graduationYear = (int) currentRow.getCell(7).getNumericCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(graduationYear);\r\nint agreedInstallments = (int) currentRow.getCell(8).getNumericCellValue();"},{"type":"EXPRESSION","structure":"// Create a new student object\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(rut);"},{"type":"EXPRESSION","structure":"student.setFirstName(firstName);"},{"type":"EXPRESSION","structure":"student.setLastName(lastName);"},{"type":"EXPRESSION","structure":"student.setBirthDate(birthDate);"},{"type":"EXPRESSION","structure":"student.setSchoolType(schoolTypeInt);"},{"type":"EXPRESSION","structure":"student.setSchoolName(schoolName);"},{"type":"EXPRESSION","structure":"student.setGraduationYear(graduationYear);"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(agreedInstallments);"},{"type":"EXPRESSION","structure":"// Save the student to the database\r\nstudentService.saveStudent(student);"},{"type":"IF","structure":"// Verify if the student is valid before saving it to the database\r\nif (administrationOffice.isValidStudent(student)) {\r\n    // Save the student to the database\r\n    studentService.saveStudent(student);\r\n}"},{"type":"TRY","structure":"try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n    Sheet sheet = workbook.getSheetAt(0);\r\n    // Getting the students from the Excel file\r\n    for (Row currentRow : sheet) {\r\n        if (currentRow.getRowNum() == 0) {\r\n            // Skip header row\r\n            continue;\r\n        }\r\n        // Getting the student values from the Excel file\r\n        // Just for testing purposes (the values are printed in the console)\r\n        String rut = currentRow.getCell(1).getStringCellValue();\r\n        // System.out.println(rut);\r\n        String firstName = currentRow.getCell(2).getStringCellValue();\r\n        // System.out.println(firstName);\r\n        String lastName = currentRow.getCell(3).getStringCellValue();\r\n        // System.out.println(lastName);\r\n        // Date format is dd-mm-yyyy\r\n        // The date is converted to LocalDate format\r\n        LocalDate birthDate = currentRow.getCell(4).getLocalDateTimeCellValue().toLocalDate();\r\n        // System.out.println(birthDate);\r\n        String schoolName = currentRow.getCell(5).getStringCellValue();\r\n        // System.out.println(schoolName);\r\n        String schoolType = currentRow.getCell(6).getStringCellValue();\r\n        // School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\n        int schoolTypeInt = 0;\r\n        switch(schoolType) {\r\n            case \"Municipal\" ->\r\n                {\r\n                }\r\n            case \"Subvencionado\" ->\r\n                schoolTypeInt = 1;\r\n            case \"Particular\" ->\r\n                schoolTypeInt = 2;\r\n        }\r\n        // System.out.println(schoolType);\r\n        int graduationYear = (int) currentRow.getCell(7).getNumericCellValue();\r\n        // System.out.println(graduationYear);\r\n        int agreedInstallments = (int) currentRow.getCell(8).getNumericCellValue();\r\n        // Create a new student object\r\n        StudentEntity student = new StudentEntity();\r\n        student.setRut(rut);\r\n        student.setFirstName(firstName);\r\n        student.setLastName(lastName);\r\n        student.setBirthDate(birthDate);\r\n        student.setSchoolType(schoolTypeInt);\r\n        student.setSchoolName(schoolName);\r\n        student.setGraduationYear(graduationYear);\r\n        student.setAgreedInstallments(agreedInstallments);\r\n        // Verify if the student is valid before saving it to the database\r\n        if (administrationOffice.isValidStudent(student)) {\r\n            // Save the student to the database\r\n            studentService.saveStudent(student);\r\n        }\r\n    }\r\n} catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"IF","structure":"// Verify if the Excel file is xlsx type\r\nif (Objects.requireNonNull(file.getOriginalFilename()).endsWith(\".xlsx\")) {\r\n    try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n        Sheet sheet = workbook.getSheetAt(0);\r\n        // Getting the students from the Excel file\r\n        for (Row currentRow : sheet) {\r\n            if (currentRow.getRowNum() == 0) {\r\n                // Skip header row\r\n                continue;\r\n            }\r\n            // Getting the student values from the Excel file\r\n            // Just for testing purposes (the values are printed in the console)\r\n            String rut = currentRow.getCell(1).getStringCellValue();\r\n            // System.out.println(rut);\r\n            String firstName = currentRow.getCell(2).getStringCellValue();\r\n            // System.out.println(firstName);\r\n            String lastName = currentRow.getCell(3).getStringCellValue();\r\n            // System.out.println(lastName);\r\n            // Date format is dd-mm-yyyy\r\n            // The date is converted to LocalDate format\r\n            LocalDate birthDate = currentRow.getCell(4).getLocalDateTimeCellValue().toLocalDate();\r\n            // System.out.println(birthDate);\r\n            String schoolName = currentRow.getCell(5).getStringCellValue();\r\n            // System.out.println(schoolName);\r\n            String schoolType = currentRow.getCell(6).getStringCellValue();\r\n            // School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\n            int schoolTypeInt = 0;\r\n            switch(schoolType) {\r\n                case \"Municipal\" ->\r\n                    {\r\n                    }\r\n                case \"Subvencionado\" ->\r\n                    schoolTypeInt = 1;\r\n                case \"Particular\" ->\r\n                    schoolTypeInt = 2;\r\n            }\r\n            // System.out.println(schoolType);\r\n            int graduationYear = (int) currentRow.getCell(7).getNumericCellValue();\r\n            // System.out.println(graduationYear);\r\n            int agreedInstallments = (int) currentRow.getCell(8).getNumericCellValue();\r\n            // Create a new student object\r\n            StudentEntity student = new StudentEntity();\r\n            student.setRut(rut);\r\n            student.setFirstName(firstName);\r\n            student.setLastName(lastName);\r\n            student.setBirthDate(birthDate);\r\n            student.setSchoolType(schoolTypeInt);\r\n            student.setSchoolName(schoolName);\r\n            student.setGraduationYear(graduationYear);\r\n            student.setAgreedInstallments(agreedInstallments);\r\n            // Verify if the student is valid before saving it to the database\r\n            if (administrationOffice.isValidStudent(student)) {\r\n                // Save the student to the database\r\n                studentService.saveStudent(student);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        // Handle exception\r\n    }\r\n}"},{"type":"CATCH","structure":" catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"EXPRESSION","structure":"Sheet sheet = workbook.getSheetAt(i);"},{"type":"IF","structure":"if (currentRow.getRowNum() == 0) {\r\n    // Skip header row\r\n    continue;\r\n}"},{"type":"EXPRESSION","structure":"// Getting the student grades values from the Excel file\r\n// Just for testing purposes (the values are printed in the console)\r\nString gradeRUT = currentRow.getCell(1).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(gradeRUT);\r\nint score = (int) currentRow.getCell(2).getNumericCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(score);\r\n// Date format is dd-mm-yyyy\r\n// The date is converted to LocalDate format\r\nLocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();"},{"type":"EXPRESSION","structure":"// System.out.println(examDate);\r\nString studentName = currentRow.getCell(4).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(studentName);\r\nString studentLastName = currentRow.getCell(5).getStringCellValue();"},{"type":"EXPRESSION","structure":"// System.out.println(studentLastName);\r\n// Create a new student grade object\r\nStudentScoreEntity studentGrade = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentGrade.setScoreRUT(gradeRUT);"},{"type":"EXPRESSION","structure":"studentGrade.setScore(score);"},{"type":"EXPRESSION","structure":"studentGrade.setExamDate(examDate);"},{"type":"EXPRESSION","structure":"studentGrade.setStudentName(studentName);"},{"type":"EXPRESSION","structure":"studentGrade.setStudentLastName(studentLastName);"},{"type":"EXPRESSION","structure":"// Save the student grade to the database\r\nstudentScoreService.saveStudentScore(studentGrade);"},{"type":"IF","structure":"// Verify if the student grade is valid before saving it to the database\r\nif (administrationOffice.isValidStudentScore(studentGrade)) {\r\n    // Save the student grade to the database\r\n    studentScoreService.saveStudentScore(studentGrade);\r\n}"},{"type":"FOR","structure":"// Getting all other sheets than the first one\r\nfor (int i = 1; i < workbook.getNumberOfSheets(); i++) {\r\n    Sheet sheet = workbook.getSheetAt(i);\r\n    // Getting the student's grades from the Excel file\r\n    for (Row currentRow : sheet) {\r\n        if (currentRow.getRowNum() == 0) {\r\n            // Skip header row\r\n            continue;\r\n        }\r\n        // Getting the student grades values from the Excel file\r\n        // Just for testing purposes (the values are printed in the console)\r\n        String gradeRUT = currentRow.getCell(1).getStringCellValue();\r\n        // System.out.println(gradeRUT);\r\n        int score = (int) currentRow.getCell(2).getNumericCellValue();\r\n        // System.out.println(score);\r\n        // Date format is dd-mm-yyyy\r\n        // The date is converted to LocalDate format\r\n        LocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();\r\n        // System.out.println(examDate);\r\n        String studentName = currentRow.getCell(4).getStringCellValue();\r\n        // System.out.println(studentName);\r\n        String studentLastName = currentRow.getCell(5).getStringCellValue();\r\n        // System.out.println(studentLastName);\r\n        // Create a new student grade object\r\n        StudentScoreEntity studentGrade = new StudentScoreEntity();\r\n        studentGrade.setScoreRUT(gradeRUT);\r\n        studentGrade.setScore(score);\r\n        studentGrade.setExamDate(examDate);\r\n        studentGrade.setStudentName(studentName);\r\n        studentGrade.setStudentLastName(studentLastName);\r\n        // Verify if the student grade is valid before saving it to the database\r\n        if (administrationOffice.isValidStudentScore(studentGrade)) {\r\n            // Save the student grade to the database\r\n            studentScoreService.saveStudentScore(studentGrade);\r\n        }\r\n    }\r\n}"},{"type":"TRY","structure":"try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n    // Getting all other sheets than the first one\r\n    for (int i = 1; i < workbook.getNumberOfSheets(); i++) {\r\n        Sheet sheet = workbook.getSheetAt(i);\r\n        // Getting the student's grades from the Excel file\r\n        for (Row currentRow : sheet) {\r\n            if (currentRow.getRowNum() == 0) {\r\n                // Skip header row\r\n                continue;\r\n            }\r\n            // Getting the student grades values from the Excel file\r\n            // Just for testing purposes (the values are printed in the console)\r\n            String gradeRUT = currentRow.getCell(1).getStringCellValue();\r\n            // System.out.println(gradeRUT);\r\n            int score = (int) currentRow.getCell(2).getNumericCellValue();\r\n            // System.out.println(score);\r\n            // Date format is dd-mm-yyyy\r\n            // The date is converted to LocalDate format\r\n            LocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();\r\n            // System.out.println(examDate);\r\n            String studentName = currentRow.getCell(4).getStringCellValue();\r\n            // System.out.println(studentName);\r\n            String studentLastName = currentRow.getCell(5).getStringCellValue();\r\n            // System.out.println(studentLastName);\r\n            // Create a new student grade object\r\n            StudentScoreEntity studentGrade = new StudentScoreEntity();\r\n            studentGrade.setScoreRUT(gradeRUT);\r\n            studentGrade.setScore(score);\r\n            studentGrade.setExamDate(examDate);\r\n            studentGrade.setStudentName(studentName);\r\n            studentGrade.setStudentLastName(studentLastName);\r\n            // Verify if the student grade is valid before saving it to the database\r\n            if (administrationOffice.isValidStudentScore(studentGrade)) {\r\n                // Save the student grade to the database\r\n                studentScoreService.saveStudentScore(studentGrade);\r\n            }\r\n        }\r\n    }\r\n} catch (Exception e) {\r\n    // Handle exception\r\n}"},{"type":"IF","structure":"// Verify if the Excel file is xlsx type\r\nif (Objects.requireNonNull(file.getOriginalFilename()).endsWith(\".xlsx\")) {\r\n    try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {\r\n        // Getting all other sheets than the first one\r\n        for (int i = 1; i < workbook.getNumberOfSheets(); i++) {\r\n            Sheet sheet = workbook.getSheetAt(i);\r\n            // Getting the student's grades from the Excel file\r\n            for (Row currentRow : sheet) {\r\n                if (currentRow.getRowNum() == 0) {\r\n                    // Skip header row\r\n                    continue;\r\n                }\r\n                // Getting the student grades values from the Excel file\r\n                // Just for testing purposes (the values are printed in the console)\r\n                String gradeRUT = currentRow.getCell(1).getStringCellValue();\r\n                // System.out.println(gradeRUT);\r\n                int score = (int) currentRow.getCell(2).getNumericCellValue();\r\n                // System.out.println(score);\r\n                // Date format is dd-mm-yyyy\r\n                // The date is converted to LocalDate format\r\n                LocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();\r\n                // System.out.println(examDate);\r\n                String studentName = currentRow.getCell(4).getStringCellValue();\r\n                // System.out.println(studentName);\r\n                String studentLastName = currentRow.getCell(5).getStringCellValue();\r\n                // System.out.println(studentLastName);\r\n                // Create a new student grade object\r\n                StudentScoreEntity studentGrade = new StudentScoreEntity();\r\n                studentGrade.setScoreRUT(gradeRUT);\r\n                studentGrade.setScore(score);\r\n                studentGrade.setExamDate(examDate);\r\n                studentGrade.setStudentName(studentName);\r\n                studentGrade.setStudentLastName(studentLastName);\r\n                // Verify if the student grade is valid before saving it to the database\r\n                if (administrationOffice.isValidStudentScore(studentGrade)) {\r\n                    // Save the student grade to the database\r\n                    studentScoreService.saveStudentScore(studentGrade);\r\n                }\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        // Handle exception\r\n    }\r\n}"},{"type":"EXPRESSION","structure":"// Get all the students\r\nIterable<StudentEntity> students = studentService.getAllStudents();"},{"type":"EXPRESSION","structure":"// Get the student grades\r\nIterable<StudentScoreEntity> studentGrades = studentScoreService.getAllStudentGradesByStudentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"// Calculate the average score\r\nint averageScore = 0;"},{"type":"EXPRESSION","structure":"int count = 0;"},{"type":"EXPRESSION","structure":"averageScore += studentGrade.getScore();"},{"type":"EXPRESSION","structure":"count++;"},{"type":"EXPRESSION","structure":"averageScore = (averageScore / count);"},{"type":"EXPRESSION","structure":"// Update the student info\r\nstudent.setAverageGrade(averageScore);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(count);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(administrationOffice.calculateFinalCost(student));"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(0);"},{"type":"EXPRESSION","structure":"// Update installments info\r\nadministrationOffice.updateStudent(student);"},{"type":"EXPRESSION","structure":"// Save the student to the database\r\nstudentService.saveStudent(student);"}],"classVariables":[{"name":"administrationOffice","type":"AdministrationOffice","scope":"instance"},{"name":"studentScoreService","type":"StudentScoreService","scope":"instance"},{"name":"studentService","type":"StudentService","scope":"instance"},{"name":"workbook","type":"Workbook","scope":"local"},{"name":"sheet","type":"Sheet","scope":"local"},{"name":"rut","type":"String","scope":"local"},{"name":"firstName","type":"String","scope":"local"},{"name":"lastName","type":"String","scope":"local"},{"name":"birthDate","type":"LocalDate","scope":"local"},{"name":"schoolName","type":"String","scope":"local"},{"name":"schoolType","type":"String","scope":"local"},{"name":"schoolTypeInt","type":"int","scope":"local"},{"name":"graduationYear","type":"int","scope":"local"},{"name":"agreedInstallments","type":"int","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"currentRow","type":"Row","scope":"local"},{"name":"workbook","type":"Workbook","scope":"local"},{"name":"sheet","type":"Sheet","scope":"local"},{"name":"gradeRUT","type":"String","scope":"local"},{"name":"score","type":"int","scope":"local"},{"name":"examDate","type":"LocalDate","scope":"local"},{"name":"studentName","type":"String","scope":"local"},{"name":"studentLastName","type":"String","scope":"local"},{"name":"studentGrade","type":"StudentScoreEntity","scope":"local"},{"name":"currentRow","type":"Row","scope":"local"},{"name":"i","type":"int","scope":"local"},{"name":"students","type":"Iterable<StudentEntity>","scope":"local"},{"name":"studentGrades","type":"Iterable<StudentScoreEntity>","scope":"local"},{"name":"averageScore","type":"int","scope":"local"},{"name":"count","type":"int","scope":"local"},{"name":"studentGrade","type":"StudentScoreEntity","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"}],"innerClasses":[],"usedClasses":["MultipartFile","void","AdministrationOffice","StudentService","StudentScoreService","Exception"],"classDependencies":["AdministrationOffice","StudentService","StudentScoreService"],"dependentClasses":["FileManagerController"],"genericUsages":null,"exceptionHandling":[{"tryBlock":"{\r\n    Sheet sheet = workbook.getSheetAt(0);\r\n    // Getting the students from the Excel file\r\n    for (Row currentRow : sheet) {\r\n        if (currentRow.getRowNum() == 0) {\r\n            // Skip header row\r\n            continue;\r\n        }\r\n        // Getting the student values from the Excel file\r\n        // Just for testing purposes (the values are printed in the console)\r\n        String rut = currentRow.getCell(1).getStringCellValue();\r\n        // System.out.println(rut);\r\n        String firstName = currentRow.getCell(2).getStringCellValue();\r\n        // System.out.println(firstName);\r\n        String lastName = currentRow.getCell(3).getStringCellValue();\r\n        // System.out.println(lastName);\r\n        // Date format is dd-mm-yyyy\r\n        // The date is converted to LocalDate format\r\n        LocalDate birthDate = currentRow.getCell(4).getLocalDateTimeCellValue().toLocalDate();\r\n        // System.out.println(birthDate);\r\n        String schoolName = currentRow.getCell(5).getStringCellValue();\r\n        // System.out.println(schoolName);\r\n        String schoolType = currentRow.getCell(6).getStringCellValue();\r\n        // School type: 0 -> Municipal, 1 -> Subsidized, 2 -> Private\r\n        int schoolTypeInt = 0;\r\n        switch(schoolType) {\r\n            case \"Municipal\" ->\r\n                {\r\n                }\r\n            case \"Subvencionado\" ->\r\n                schoolTypeInt = 1;\r\n            case \"Particular\" ->\r\n                schoolTypeInt = 2;\r\n        }\r\n        // System.out.println(schoolType);\r\n        int graduationYear = (int) currentRow.getCell(7).getNumericCellValue();\r\n        // System.out.println(graduationYear);\r\n        int agreedInstallments = (int) currentRow.getCell(8).getNumericCellValue();\r\n        // Create a new student object\r\n        StudentEntity student = new StudentEntity();\r\n        student.setRut(rut);\r\n        student.setFirstName(firstName);\r\n        student.setLastName(lastName);\r\n        student.setBirthDate(birthDate);\r\n        student.setSchoolType(schoolTypeInt);\r\n        student.setSchoolName(schoolName);\r\n        student.setGraduationYear(graduationYear);\r\n        student.setAgreedInstallments(agreedInstallments);\r\n        // Verify if the student is valid before saving it to the database\r\n        if (administrationOffice.isValidStudent(student)) {\r\n            // Save the student to the database\r\n            studentService.saveStudent(student);\r\n        }\r\n    }\r\n}","catchBlocks":[" catch (Exception e) {\r\n    // Handle exception\r\n}"],"finallyBlock":null},{"tryBlock":"{\r\n    // Getting all other sheets than the first one\r\n    for (int i = 1; i < workbook.getNumberOfSheets(); i++) {\r\n        Sheet sheet = workbook.getSheetAt(i);\r\n        // Getting the student's grades from the Excel file\r\n        for (Row currentRow : sheet) {\r\n            if (currentRow.getRowNum() == 0) {\r\n                // Skip header row\r\n                continue;\r\n            }\r\n            // Getting the student grades values from the Excel file\r\n            // Just for testing purposes (the values are printed in the console)\r\n            String gradeRUT = currentRow.getCell(1).getStringCellValue();\r\n            // System.out.println(gradeRUT);\r\n            int score = (int) currentRow.getCell(2).getNumericCellValue();\r\n            // System.out.println(score);\r\n            // Date format is dd-mm-yyyy\r\n            // The date is converted to LocalDate format\r\n            LocalDate examDate = currentRow.getCell(3).getLocalDateTimeCellValue().toLocalDate();\r\n            // System.out.println(examDate);\r\n            String studentName = currentRow.getCell(4).getStringCellValue();\r\n            // System.out.println(studentName);\r\n            String studentLastName = currentRow.getCell(5).getStringCellValue();\r\n            // System.out.println(studentLastName);\r\n            // Create a new student grade object\r\n            StudentScoreEntity studentGrade = new StudentScoreEntity();\r\n            studentGrade.setScoreRUT(gradeRUT);\r\n            studentGrade.setScore(score);\r\n            studentGrade.setExamDate(examDate);\r\n            studentGrade.setStudentName(studentName);\r\n            studentGrade.setStudentLastName(studentLastName);\r\n            // Verify if the student grade is valid before saving it to the database\r\n            if (administrationOffice.isValidStudentScore(studentGrade)) {\r\n                // Save the student grade to the database\r\n                studentScoreService.saveStudentScore(studentGrade);\r\n            }\r\n        }\r\n    }\r\n}","catchBlocks":[" catch (Exception e) {\r\n    // Handle exception\r\n}"],"finallyBlock":null}],"linesOfCode":188},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":60,"classifiedDependencies":{"JAVA_STANDARD":["java.io.IOException","java.time.LocalDate","java.util.Objects"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Service","org.springframework.web.multipart.MultipartFile"],"INTERNAL":["TopEducation.TopEducationApp.entities.StudentScoreEntity","TopEducation.TopEducationApp.entities.StudentEntity"],"EXTERNAL_KNOWN":["org.apache.poi.ss.usermodel.Row","org.apache.poi.ss.usermodel.Sheet","org.apache.poi.ss.usermodel.Workbook","org.apache.poi.xssf.usermodel.XSSFWorkbook"],"EXTERNAL_UNKNOWN":["lombok.Generated"]},"programMetrics":{"numberOfMethods":3,"sumOfExecutableStatements":58,"maxInputParameters":1,"maxOutputParameters":0,"linesOfCode":188},"complexityMetrics":{"approxMcCabeCC":13,"maxMethodMcCabeCC":6,"improvedCC":0.3404255319148936},"couplingMetrics":{"afferentCoupling":1,"efferentCoupling":3,"instability":0.75},"cohesionMetrics":{"lackOfCohesion1":3,"lackOfCohesion2":3,"lackOfCohesion3":3,"lackOfCohesion4":3,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"InstallmentService","javaFileType":"CLASS","layerAnnotation":"SERVICE","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Generated","Service"],"constructors":[],"methods":[{"name":"saveInstallment","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"installmentRepository.save(installment);"}]},"inputParameters":[{"name":"installment","type":"InstallmentEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteInstallment","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":3,"numberOfExecutableStatements":2,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"installmentRepository.deleteById(id);"},{"type":"TRY","structure":"try {\r\n    installmentRepository.deleteById(id);\r\n} catch (Exception ignored) {\r\n}"}]},"inputParameters":[{"name":"id","type":"Long","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":6,"mcCabeComplexity":2},"methodVariables":[]},{"name":"deleteAllInstallments","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":3,"numberOfExecutableStatements":2,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"installmentRepository.deleteAll();"},{"type":"TRY","structure":"try {\r\n    installmentRepository.deleteAll();\r\n} catch (Exception ignored) {\r\n}"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":6,"mcCabeComplexity":2},"methodVariables":[]},{"name":"findAllByInstallmentRUT","basicInfo":{"accessModifier":"public","returnType":"List<InstallmentEntity>"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return (installmentRepository.findAllInstallmentsByRUT(installmentRUT));"}]},"inputParameters":[{"name":"installmentRUT","type":"String","annotations":[]}],"outputParameters":[{"name":"return","type":"List<InstallmentEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"findAllPaidInstallmentsByRUT","basicInfo":{"accessModifier":"public","returnType":"List<InstallmentEntity>"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return (installmentRepository.findAllPaidInstallmentsByRUT(installmentRUT));"}]},"inputParameters":[{"name":"installmentRUT","type":"String","annotations":[]}],"outputParameters":[{"name":"return","type":"List<InstallmentEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"findAllOverdueInstallmentsByRUT","basicInfo":{"accessModifier":"public","returnType":"List<InstallmentEntity>"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return (installmentRepository.findAllOverdueInstallmentsByRUT(installmentRUT));"}]},"inputParameters":[{"name":"installmentRUT","type":"String","annotations":[]}],"outputParameters":[{"name":"return","type":"List<InstallmentEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"updateInstallmentOverdueStatus","basicInfo":{"accessModifier":"public","returnType":"boolean"},"statementsInfo":{"numberOfStatements":7,"numberOfExecutableStatements":7,"numberOfControlStatements":1,"numberOfReturnStatements":2,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":1,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"LocalDate paymentDate = installment.getInstallmentPaymentDate();"},{"type":"EXPRESSION","structure":"LocalDate currentDate = LocalDate.now();"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(1);"},{"type":"RETURN","structure":"return true;"},{"type":"IF","structure":"if (currentDate.isAfter(paymentDate.plusMonths(1)) && installment.getInstallmentStatus() == 0) {\r\n    installment.setInstallmentOverdueStatus(1);\r\n    return true;\r\n}"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"RETURN","structure":"return false;"}]},"inputParameters":[{"name":"installment","type":"InstallmentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"boolean","annotations":[]}],"methodMetrics":{"linesOfCode":10,"mcCabeComplexity":3},"methodVariables":[{"name":"paymentDate","type":"LocalDate","scope":"local"},{"name":"currentDate","type":"LocalDate","scope":"local"}]},{"name":"updateInstallmentsOverdueStatusByRUT","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":2,"numberOfExecutableStatements":2,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"List<InstallmentEntity> installments = findAllByInstallmentRUT(installmentRUT);"},{"type":"EXPRESSION","structure":"updateInstallmentOverdueStatus(installment);"}]},"inputParameters":[{"name":"installmentRUT","type":"String","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":6,"mcCabeComplexity":1},"methodVariables":[{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}]},{"name":"markInstallmentAsPAid","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(1);"}]},"inputParameters":[{"name":"installment","type":"InstallmentEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[{"type":"EXPRESSION","structure":"installmentRepository.save(installment);"},{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"installmentRepository.deleteById(id);"},{"type":"TRY","structure":"try {\r\n    installmentRepository.deleteById(id);\r\n} catch (Exception ignored) {\r\n}"},{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"installmentRepository.deleteAll();"},{"type":"TRY","structure":"try {\r\n    installmentRepository.deleteAll();\r\n} catch (Exception ignored) {\r\n}"},{"type":"RETURN","structure":"return (installmentRepository.findAllInstallmentsByRUT(installmentRUT));"},{"type":"RETURN","structure":"return (installmentRepository.findAllPaidInstallmentsByRUT(installmentRUT));"},{"type":"RETURN","structure":"return (installmentRepository.findAllOverdueInstallmentsByRUT(installmentRUT));"},{"type":"EXPRESSION","structure":"LocalDate paymentDate = installment.getInstallmentPaymentDate();"},{"type":"EXPRESSION","structure":"LocalDate currentDate = LocalDate.now();"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(1);"},{"type":"RETURN","structure":"return true;"},{"type":"IF","structure":"if (currentDate.isAfter(paymentDate.plusMonths(1)) && installment.getInstallmentStatus() == 0) {\r\n    installment.setInstallmentOverdueStatus(1);\r\n    return true;\r\n}"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"RETURN","structure":"return false;"},{"type":"EXPRESSION","structure":"List<InstallmentEntity> installments = findAllByInstallmentRUT(installmentRUT);"},{"type":"EXPRESSION","structure":"updateInstallmentOverdueStatus(installment);"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(1);"}],"classVariables":[{"name":"installmentRepository","type":"InstallmentRepository","scope":"instance"},{"name":"paymentDate","type":"LocalDate","scope":"local"},{"name":"currentDate","type":"LocalDate","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}],"innerClasses":[],"usedClasses":["InstallmentRepository","InstallmentEntity","void","boolean","Long","List","String","Exception"],"classDependencies":["InstallmentRepository","InstallmentEntity"],"dependentClasses":["StudentController","AdministrationOffice","StudentService"],"genericUsages":null,"exceptionHandling":[{"tryBlock":"{\r\n    installmentRepository.deleteById(id);\r\n}","catchBlocks":[" catch (Exception ignored) {\r\n}"],"finallyBlock":null},{"tryBlock":"{\r\n    installmentRepository.deleteAll();\r\n}","catchBlocks":[" catch (Exception ignored) {\r\n}"],"finallyBlock":null}],"linesOfCode":71},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":20,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate","java.util.List"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Service"],"INTERNAL":["TopEducation.TopEducationApp.entities.InstallmentEntity","TopEducation.TopEducationApp.repositories.InstallmentRepository"],"EXTERNAL_UNKNOWN":["lombok.Generated"]},"programMetrics":{"numberOfMethods":9,"sumOfExecutableStatements":18,"maxInputParameters":1,"maxOutputParameters":1,"linesOfCode":71},"complexityMetrics":{"approxMcCabeCC":13,"maxMethodMcCabeCC":3,"improvedCC":0.43661971830985913},"couplingMetrics":{"afferentCoupling":3,"efferentCoupling":2,"instability":0.4},"cohesionMetrics":{"lackOfCohesion1":36,"lackOfCohesion2":36,"lackOfCohesion3":9,"lackOfCohesion4":9,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"StudentScoreService","javaFileType":"CLASS","layerAnnotation":"SERVICE","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Generated","Generated","Service"],"constructors":[],"methods":[{"name":"getAllStudentGrades","basicInfo":{"accessModifier":"public","returnType":"ArrayList<StudentScoreEntity>"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return (ArrayList<StudentScoreEntity>) studentScoreRepository.findAll();"}]},"inputParameters":[],"outputParameters":[{"name":"return","type":"ArrayList<StudentScoreEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"saveStudentScore","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentScoreRepository.save(studentGrade);"}]},"inputParameters":[{"name":"studentGrade","type":"StudentScoreEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteStudentGrade","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":3,"numberOfExecutableStatements":2,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentScoreRepository.deleteById(id);"},{"type":"TRY","structure":"try {\r\n    studentScoreRepository.deleteById(id);\r\n} catch (Exception ignored) {\r\n}"}]},"inputParameters":[{"name":"id","type":"Long","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":6,"mcCabeComplexity":2},"methodVariables":[]},{"name":"findById","basicInfo":{"accessModifier":"public","returnType":"StudentScoreEntity"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return studentScoreRepository.findById(id).orElse(null);"}]},"inputParameters":[{"name":"id","type":"Long","annotations":[]}],"outputParameters":[{"name":"return","type":"StudentScoreEntity","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteAllStudentGrades","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":3,"numberOfExecutableStatements":2,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentScoreRepository.deleteAll();"},{"type":"TRY","structure":"try {\r\n    studentScoreRepository.deleteAll();\r\n} catch (Exception ignored) {\r\n}"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":6,"mcCabeComplexity":2},"methodVariables":[]},{"name":"getAllStudentGradesByStudentRUT","basicInfo":{"accessModifier":"public","returnType":"ArrayList<StudentScoreEntity>"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return studentScoreRepository.findAllGradesByStudentRUT(gradeRUT);"}]},"inputParameters":[{"name":"gradeRUT","type":"String","annotations":[]}],"outputParameters":[{"name":"return","type":"ArrayList<StudentScoreEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[{"type":"RETURN","structure":"return (ArrayList<StudentScoreEntity>) studentScoreRepository.findAll();"},{"type":"EXPRESSION","structure":"studentScoreRepository.save(studentGrade);"},{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentScoreRepository.deleteById(id);"},{"type":"TRY","structure":"try {\r\n    studentScoreRepository.deleteById(id);\r\n} catch (Exception ignored) {\r\n}"},{"type":"RETURN","structure":"return studentScoreRepository.findById(id).orElse(null);"},{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentScoreRepository.deleteAll();"},{"type":"TRY","structure":"try {\r\n    studentScoreRepository.deleteAll();\r\n} catch (Exception ignored) {\r\n}"},{"type":"RETURN","structure":"return studentScoreRepository.findAllGradesByStudentRUT(gradeRUT);"}],"classVariables":[{"name":"studentScoreRepository","type":"StudentScoreRepository","scope":"instance"}],"innerClasses":[],"usedClasses":["StudentScoreEntity","void","ArrayList","Long","StudentScoreRepository","String","Exception"],"classDependencies":["StudentScoreEntity","StudentScoreRepository"],"dependentClasses":["StudentScoreController","FileManagerService","StudentService"],"genericUsages":null,"exceptionHandling":[{"tryBlock":"{\r\n    studentScoreRepository.deleteById(id);\r\n}","catchBlocks":[" catch (Exception ignored) {\r\n}"],"finallyBlock":null},{"tryBlock":"{\r\n    studentScoreRepository.deleteAll();\r\n}","catchBlocks":[" catch (Exception ignored) {\r\n}"],"finallyBlock":null}],"linesOfCode":46},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":10,"classifiedDependencies":{"JAVA_STANDARD":["java.util.ArrayList"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Service"],"INTERNAL":["TopEducation.TopEducationApp.entities.StudentScoreEntity","TopEducation.TopEducationApp.repositories.StudentScoreRepository"],"EXTERNAL_UNKNOWN":["lombok.Generated"]},"programMetrics":{"numberOfMethods":6,"sumOfExecutableStatements":8,"maxInputParameters":1,"maxOutputParameters":1,"linesOfCode":46},"complexityMetrics":{"approxMcCabeCC":8,"maxMethodMcCabeCC":2,"improvedCC":0.391304347826087},"couplingMetrics":{"afferentCoupling":3,"efferentCoupling":2,"instability":0.4},"cohesionMetrics":{"lackOfCohesion1":15,"lackOfCohesion2":15,"lackOfCohesion3":6,"lackOfCohesion4":6,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"StudentService","javaFileType":"CLASS","layerAnnotation":"SERVICE","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Autowired","Autowired","Generated","Generated","Service"],"constructors":[],"methods":[{"name":"getAllStudents","basicInfo":{"accessModifier":"public","returnType":"ArrayList<StudentEntity>"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return (ArrayList<StudentEntity>) studentRepository.findAll();"}]},"inputParameters":[],"outputParameters":[{"name":"return","type":"ArrayList<StudentEntity>","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"saveStudent","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentRepository.save(student);"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteStudent","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":6,"numberOfExecutableStatements":5,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentRepository.deleteById(id);"},{"type":"EXPRESSION","structure":"StudentEntity student = findById(id);"},{"type":"EXPRESSION","structure":"List<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(installment.getId());"},{"type":"TRY","structure":"try {\r\n    studentRepository.deleteById(id);\r\n    StudentEntity student = findById(id);\r\n    List<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());\r\n    for (InstallmentEntity installment : installments) {\r\n        installmentService.deleteInstallment(installment.getId());\r\n    }\r\n} catch (Exception ignored) {\r\n}"}]},"inputParameters":[{"name":"id","type":"Long","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":11,"mcCabeComplexity":2},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}]},{"name":"deleteAllStudents","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":4,"numberOfExecutableStatements":3,"numberOfControlStatements":2,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentRepository.deleteAll();"},{"type":"EXPRESSION","structure":"installmentService.deleteAllInstallments();"},{"type":"TRY","structure":"try {\r\n    studentRepository.deleteAll();\r\n    installmentService.deleteAllInstallments();\r\n} catch (Exception ignored) {\r\n}"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":7,"mcCabeComplexity":2},"methodVariables":[]},{"name":"findById","basicInfo":{"accessModifier":"public","returnType":"StudentEntity"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return studentRepository.findById(id).orElse(null);"}]},"inputParameters":[{"name":"id","type":"Long","annotations":[]}],"outputParameters":[{"name":"return","type":"StudentEntity","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[{"type":"RETURN","structure":"return (ArrayList<StudentEntity>) studentRepository.findAll();"},{"type":"EXPRESSION","structure":"studentRepository.save(student);"},{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentRepository.deleteById(id);"},{"type":"EXPRESSION","structure":"StudentEntity student = findById(id);"},{"type":"EXPRESSION","structure":"List<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(installment.getId());"},{"type":"TRY","structure":"try {\r\n    studentRepository.deleteById(id);\r\n    StudentEntity student = findById(id);\r\n    List<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());\r\n    for (InstallmentEntity installment : installments) {\r\n        installmentService.deleteInstallment(installment.getId());\r\n    }\r\n} catch (Exception ignored) {\r\n}"},{"type":"CATCH","structure":" catch (Exception ignored) {\r\n}"},{"type":"EXPRESSION","structure":"studentRepository.deleteAll();"},{"type":"EXPRESSION","structure":"installmentService.deleteAllInstallments();"},{"type":"TRY","structure":"try {\r\n    studentRepository.deleteAll();\r\n    installmentService.deleteAllInstallments();\r\n} catch (Exception ignored) {\r\n}"},{"type":"RETURN","structure":"return studentRepository.findById(id).orElse(null);"}],"classVariables":[{"name":"studentRepository","type":"StudentRepository","scope":"instance"},{"name":"studentScoreService","type":"StudentScoreService","scope":"instance"},{"name":"installmentService","type":"InstallmentService","scope":"instance"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}],"innerClasses":[],"usedClasses":["StudentRepository","void","ArrayList","StudentEntity","Long","InstallmentService","StudentScoreService","Exception"],"classDependencies":["StudentRepository","StudentEntity","InstallmentService","StudentScoreService"],"dependentClasses":["StudentController","FileManagerService"],"genericUsages":null,"exceptionHandling":[{"tryBlock":"{\r\n    studentRepository.deleteById(id);\r\n    StudentEntity student = findById(id);\r\n    List<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());\r\n    for (InstallmentEntity installment : installments) {\r\n        installmentService.deleteInstallment(installment.getId());\r\n    }\r\n}","catchBlocks":[" catch (Exception ignored) {\r\n}"],"finallyBlock":null},{"tryBlock":"{\r\n    studentRepository.deleteAll();\r\n    installmentService.deleteAllInstallments();\r\n}","catchBlocks":[" catch (Exception ignored) {\r\n}"],"finallyBlock":null}],"linesOfCode":55},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":13,"classifiedDependencies":{"JAVA_STANDARD":["java.util.ArrayList","java.util.List"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Service"],"INTERNAL":["TopEducation.TopEducationApp.entities.InstallmentEntity","TopEducation.TopEducationApp.entities.StudentEntity","TopEducation.TopEducationApp.repositories.StudentRepository"],"EXTERNAL_UNKNOWN":["lombok.Generated"]},"programMetrics":{"numberOfMethods":5,"sumOfExecutableStatements":11,"maxInputParameters":1,"maxOutputParameters":1,"linesOfCode":55},"complexityMetrics":{"approxMcCabeCC":7,"maxMethodMcCabeCC":2,"improvedCC":0.36363636363636365},"couplingMetrics":{"afferentCoupling":2,"efferentCoupling":4,"instability":0.6666666666666666},"cohesionMetrics":{"lackOfCohesion1":10,"lackOfCohesion2":10,"lackOfCohesion3":5,"lackOfCohesion4":5,"lackOfCohesion5":1.0}}}],"controllers":[{"classInstance":{"name":"FileManagerController","javaFileType":"CLASS","layerAnnotation":"CONTROLLER","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Autowired","GetMapping","RequestParam","PostMapping","Controller","RequestMapping"],"constructors":[],"methods":[{"name":"fileUploadForm","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return \"fileManager\";"}]},"inputParameters":[],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"uploadExcelFile","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":7,"numberOfExecutableStatements":6,"numberOfControlStatements":2,"numberOfReturnStatements":2,"numberOfThrowStatements":0,"numberOfCatchClauses":1,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"// Handle the exception and return an error response\r\nreturn \"redirect:/fileManager\";"},{"type":"CATCH","structure":" catch (IOException e) {\r\n    // Handle the exception and return an error response\r\n    return \"redirect:/fileManager\";\r\n}"},{"type":"EXPRESSION","structure":"// Save the Excel file data to the database\r\nfileManagerService.saveExcelDataStudentGrade(file);"},{"type":"EXPRESSION","structure":"fileManagerService.saveExcelDataStudent(file);"},{"type":"EXPRESSION","structure":"// Update the student's info\r\nfileManagerService.updateStudentsInfo();"},{"type":"RETURN","structure":"// Redirect to the students list page\r\nreturn \"redirect:/studentList\";"},{"type":"TRY","structure":"try {\r\n    // Save the Excel file data to the database\r\n    fileManagerService.saveExcelDataStudentGrade(file);\r\n    fileManagerService.saveExcelDataStudent(file);\r\n    // Update the student's info\r\n    fileManagerService.updateStudentsInfo();\r\n    // Redirect to the students list page\r\n    return \"redirect:/studentList\";\r\n} catch (IOException e) {\r\n    // Handle the exception and return an error response\r\n    return \"redirect:/fileManager\";\r\n}"}]},"inputParameters":[{"name":"file","type":"MultipartFile","annotations":["RequestParam"]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":14,"mcCabeComplexity":2},"methodVariables":[]}],"statements":[{"type":"RETURN","structure":"return \"fileManager\";"},{"type":"RETURN","structure":"// Handle the exception and return an error response\r\nreturn \"redirect:/fileManager\";"},{"type":"CATCH","structure":" catch (IOException e) {\r\n    // Handle the exception and return an error response\r\n    return \"redirect:/fileManager\";\r\n}"},{"type":"EXPRESSION","structure":"// Save the Excel file data to the database\r\nfileManagerService.saveExcelDataStudentGrade(file);"},{"type":"EXPRESSION","structure":"fileManagerService.saveExcelDataStudent(file);"},{"type":"EXPRESSION","structure":"// Update the student's info\r\nfileManagerService.updateStudentsInfo();"},{"type":"RETURN","structure":"// Redirect to the students list page\r\nreturn \"redirect:/studentList\";"},{"type":"TRY","structure":"try {\r\n    // Save the Excel file data to the database\r\n    fileManagerService.saveExcelDataStudentGrade(file);\r\n    fileManagerService.saveExcelDataStudent(file);\r\n    // Update the student's info\r\n    fileManagerService.updateStudentsInfo();\r\n    // Redirect to the students list page\r\n    return \"redirect:/studentList\";\r\n} catch (IOException e) {\r\n    // Handle the exception and return an error response\r\n    return \"redirect:/fileManager\";\r\n}"}],"classVariables":[{"name":"fileManagerService","type":"FileManagerService","scope":"instance"},{"name":"administrationOffice","type":"AdministrationOffice","scope":"instance"}],"innerClasses":[],"usedClasses":["MultipartFile","FileManagerService","AdministrationOffice","String","IOException"],"classDependencies":["FileManagerService","AdministrationOffice"],"dependentClasses":[],"genericUsages":null,"exceptionHandling":[{"tryBlock":"{\r\n    // Save the Excel file data to the database\r\n    fileManagerService.saveExcelDataStudentGrade(file);\r\n    fileManagerService.saveExcelDataStudent(file);\r\n    // Update the student's info\r\n    fileManagerService.updateStudentsInfo();\r\n    // Redirect to the students list page\r\n    return \"redirect:/studentList\";\r\n}","catchBlocks":[" catch (IOException e) {\r\n    // Handle the exception and return an error response\r\n    return \"redirect:/fileManager\";\r\n}"],"finallyBlock":null}],"linesOfCode":32},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":8,"classifiedDependencies":{"JAVA_STANDARD":["java.io.IOException"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Controller","org.springframework.web.bind.annotation.GetMapping","org.springframework.web.bind.annotation.PostMapping","org.springframework.web.bind.annotation.RequestMapping","org.springframework.web.bind.annotation.RequestParam","org.springframework.web.multipart.MultipartFile"],"INTERNAL":["TopEducation.TopEducationApp.services.AdministrationOffice","TopEducation.TopEducationApp.services.FileManagerService"]},"programMetrics":{"numberOfMethods":2,"sumOfExecutableStatements":7,"maxInputParameters":1,"maxOutputParameters":1,"linesOfCode":32},"complexityMetrics":{"approxMcCabeCC":3,"maxMethodMcCabeCC":2,"improvedCC":0.375},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":2,"instability":1.0},"cohesionMetrics":{"lackOfCohesion1":1,"lackOfCohesion2":1,"lackOfCohesion3":2,"lackOfCohesion4":2,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"IndexController","javaFileType":"CLASS","layerAnnotation":"CONTROLLER","superClasses":[],"implementedInterfaces":[],"annotations":["GetMapping","Controller","RequestMapping"],"constructors":[],"methods":[{"name":"homePage","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return \"home\";"}]},"inputParameters":[],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[{"type":"RETURN","structure":"return \"home\";"}],"classVariables":[],"innerClasses":[],"usedClasses":["String"],"classDependencies":[],"dependentClasses":[],"genericUsages":null,"exceptionHandling":[],"linesOfCode":11},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":1,"classifiedDependencies":{"SPRING":["org.springframework.stereotype.Controller","org.springframework.web.bind.annotation.GetMapping","org.springframework.web.bind.annotation.RequestMapping"]},"programMetrics":{"numberOfMethods":1,"sumOfExecutableStatements":1,"maxInputParameters":0,"maxOutputParameters":1,"linesOfCode":11},"complexityMetrics":{"approxMcCabeCC":1,"maxMethodMcCabeCC":1,"improvedCC":0.2727272727272727},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":1,"lackOfCohesion4":1,"lackOfCohesion5":0.0}}},{"classInstance":{"name":"StudentController","javaFileType":"CLASS","layerAnnotation":"CONTROLLER","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Autowired","Autowired","GetMapping","GetMapping","PostMapping","GetMapping","GetMapping","PathVariable","GetMapping","Controller","RequestMapping"],"constructors":[],"methods":[{"name":"listStudents","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":3,"numberOfExecutableStatements":3,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"ArrayList<StudentEntity> students = studentService.getAllStudents();"},{"type":"EXPRESSION","structure":"model.addAttribute(\"students\", students);"},{"type":"RETURN","structure":"return \"studentList\";"}]},"inputParameters":[{"name":"model","type":"Model","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":5,"mcCabeComplexity":1},"methodVariables":[{"name":"students","type":"ArrayList<StudentEntity>","scope":"local"}]},{"name":"createStudent","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return \"studentCreator\";"}]},"inputParameters":[],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"createStudent","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":2,"numberOfExecutableStatements":2,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentService.saveStudent(student);"},{"type":"RETURN","structure":"return \"redirect:/studentList\";"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":4,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteStudent","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":2,"numberOfExecutableStatements":2,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentService.deleteStudent(student.getId());"},{"type":"RETURN","structure":"return \"redirect:/studentList\";"}]},"inputParameters":[{"name":"student","type":"StudentEntity","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":4,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteAllStudents","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":2,"numberOfExecutableStatements":2,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentService.deleteAllStudents();"},{"type":"RETURN","structure":"return \"redirect:/studentList\";"}]},"inputParameters":[],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":4,"mcCabeComplexity":1},"methodVariables":[]},{"name":"showStudentDetails","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":6,"numberOfExecutableStatements":6,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Get a student by id\r\nStudentEntity student = studentService.findById(id);"},{"type":"EXPRESSION","structure":"administrationOffice.updateStudent(student);"},{"type":"EXPRESSION","structure":"model.addAttribute(\"student\", student);"},{"type":"EXPRESSION","structure":"// Get installments by student RUT\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"model.addAttribute(\"installments\", installments);"},{"type":"RETURN","structure":"// Get the total amount to pay\r\nreturn \"studentDetails\";"}]},"inputParameters":[{"name":"id","type":"Long","annotations":["PathVariable"]},{"name":"model","type":"Model","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":11,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"}]}],"statements":[{"type":"EXPRESSION","structure":"ArrayList<StudentEntity> students = studentService.getAllStudents();"},{"type":"EXPRESSION","structure":"model.addAttribute(\"students\", students);"},{"type":"RETURN","structure":"return \"studentList\";"},{"type":"RETURN","structure":"return \"studentCreator\";"},{"type":"EXPRESSION","structure":"studentService.saveStudent(student);"},{"type":"RETURN","structure":"return \"redirect:/studentList\";"},{"type":"EXPRESSION","structure":"studentService.deleteStudent(student.getId());"},{"type":"RETURN","structure":"return \"redirect:/studentList\";"},{"type":"EXPRESSION","structure":"studentService.deleteAllStudents();"},{"type":"RETURN","structure":"return \"redirect:/studentList\";"},{"type":"EXPRESSION","structure":"// Get a student by id\r\nStudentEntity student = studentService.findById(id);"},{"type":"EXPRESSION","structure":"administrationOffice.updateStudent(student);"},{"type":"EXPRESSION","structure":"model.addAttribute(\"student\", student);"},{"type":"EXPRESSION","structure":"// Get installments by student RUT\r\nList<InstallmentEntity> installments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"model.addAttribute(\"installments\", installments);"},{"type":"RETURN","structure":"// Get the total amount to pay\r\nreturn \"studentDetails\";"}],"classVariables":[{"name":"studentService","type":"StudentService","scope":"instance"},{"name":"installmentService","type":"InstallmentService","scope":"instance"},{"name":"administrationOffice","type":"AdministrationOffice","scope":"instance"},{"name":"students","type":"ArrayList<StudentEntity>","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"installments","type":"List<InstallmentEntity>","scope":"local"}],"innerClasses":[],"usedClasses":["Model","StudentEntity","Long","StudentService","AdministrationOffice","String","InstallmentService"],"classDependencies":["StudentEntity","StudentService","AdministrationOffice","InstallmentService"],"dependentClasses":[],"genericUsages":null,"exceptionHandling":[],"linesOfCode":65},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":16,"classifiedDependencies":{"JAVA_STANDARD":["java.util.ArrayList","java.util.List"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Controller","org.springframework.ui.Model","org.springframework.web.bind.annotation.GetMapping","org.springframework.web.bind.annotation.PathVariable","org.springframework.web.bind.annotation.PostMapping","org.springframework.web.bind.annotation.RequestMapping"],"INTERNAL":["TopEducation.TopEducationApp.entities.InstallmentEntity","TopEducation.TopEducationApp.entities.StudentEntity","TopEducation.TopEducationApp.services.AdministrationOffice","TopEducation.TopEducationApp.services.InstallmentService","TopEducation.TopEducationApp.services.StudentService"]},"programMetrics":{"numberOfMethods":6,"sumOfExecutableStatements":16,"maxInputParameters":2,"maxOutputParameters":1,"linesOfCode":65},"complexityMetrics":{"approxMcCabeCC":6,"maxMethodMcCabeCC":1,"improvedCC":0.38461538461538464},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":4,"instability":1.0},"cohesionMetrics":{"lackOfCohesion1":15,"lackOfCohesion2":15,"lackOfCohesion3":6,"lackOfCohesion4":6,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"StudentScoreController","javaFileType":"CLASS","layerAnnotation":"CONTROLLER","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","GetMapping","GetMapping","PostMapping","GetMapping","GetMapping","Controller","RequestMapping"],"constructors":[],"methods":[{"name":"listStudentGrades","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":3,"numberOfExecutableStatements":3,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"ArrayList<StudentScoreEntity> studentGrades = studentScoreService.getAllStudentGrades();"},{"type":"EXPRESSION","structure":"model.addAttribute(\"studentGrades\", studentGrades);"},{"type":"RETURN","structure":"return \"studentGradeList\";"}]},"inputParameters":[{"name":"model","type":"Model","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":5,"mcCabeComplexity":1},"methodVariables":[{"name":"studentGrades","type":"ArrayList<StudentScoreEntity>","scope":"local"}]},{"name":"createStudentGrade","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"RETURN","structure":"return \"scoreCreator\";"}]},"inputParameters":[],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]},{"name":"createStudentGrade","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":2,"numberOfExecutableStatements":2,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentScoreService.saveStudentScore(studentGrade);"},{"type":"RETURN","structure":"return \"redirect:/studentGradeList\";"}]},"inputParameters":[{"name":"studentGrade","type":"StudentScoreEntity","annotations":[]},{"name":"model","type":"Model","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":4,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteStudentGrade","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":2,"numberOfExecutableStatements":2,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentScoreService.deleteStudentGrade(studentGrade.getId());"},{"type":"RETURN","structure":"return \"redirect:/studentGradeList\";"}]},"inputParameters":[{"name":"studentGrade","type":"StudentScoreEntity","annotations":[]},{"name":"model","type":"Model","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":4,"mcCabeComplexity":1},"methodVariables":[]},{"name":"deleteAllStudentGrades","basicInfo":{"accessModifier":"public","returnType":"String"},"statementsInfo":{"numberOfStatements":2,"numberOfExecutableStatements":2,"numberOfControlStatements":0,"numberOfReturnStatements":1,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"studentScoreService.deleteAllStudentGrades();"},{"type":"RETURN","structure":"return \"redirect:/studentGradeList\";"}]},"inputParameters":[{"name":"model","type":"Model","annotations":[]}],"outputParameters":[{"name":"return","type":"String","annotations":[]}],"methodMetrics":{"linesOfCode":4,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[{"type":"EXPRESSION","structure":"ArrayList<StudentScoreEntity> studentGrades = studentScoreService.getAllStudentGrades();"},{"type":"EXPRESSION","structure":"model.addAttribute(\"studentGrades\", studentGrades);"},{"type":"RETURN","structure":"return \"studentGradeList\";"},{"type":"RETURN","structure":"return \"scoreCreator\";"},{"type":"EXPRESSION","structure":"studentScoreService.saveStudentScore(studentGrade);"},{"type":"RETURN","structure":"return \"redirect:/studentGradeList\";"},{"type":"EXPRESSION","structure":"studentScoreService.deleteStudentGrade(studentGrade.getId());"},{"type":"RETURN","structure":"return \"redirect:/studentGradeList\";"},{"type":"EXPRESSION","structure":"studentScoreService.deleteAllStudentGrades();"},{"type":"RETURN","structure":"return \"redirect:/studentGradeList\";"}],"classVariables":[{"name":"studentScoreService","type":"StudentScoreService","scope":"instance"},{"name":"studentGrades","type":"ArrayList<StudentScoreEntity>","scope":"local"}],"innerClasses":[],"usedClasses":["StudentScoreEntity","Model","String","StudentScoreService"],"classDependencies":["StudentScoreEntity","StudentScoreService"],"dependentClasses":[],"genericUsages":null,"exceptionHandling":[],"linesOfCode":41},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":10,"classifiedDependencies":{"JAVA_STANDARD":["java.util.ArrayList"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.stereotype.Controller","org.springframework.ui.Model","org.springframework.web.bind.annotation.GetMapping","org.springframework.web.bind.annotation.PostMapping","org.springframework.web.bind.annotation.RequestMapping"],"INTERNAL":["TopEducation.TopEducationApp.entities.StudentScoreEntity","TopEducation.TopEducationApp.services.StudentScoreService"]},"programMetrics":{"numberOfMethods":5,"sumOfExecutableStatements":10,"maxInputParameters":2,"maxOutputParameters":1,"linesOfCode":41},"complexityMetrics":{"approxMcCabeCC":5,"maxMethodMcCabeCC":1,"improvedCC":0.43902439024390244},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":2,"instability":1.0},"cohesionMetrics":{"lackOfCohesion1":10,"lackOfCohesion2":10,"lackOfCohesion3":5,"lackOfCohesion4":5,"lackOfCohesion5":1.0}}}],"testClasses":[{"classInstance":{"name":"AdministrationOfficeTest","javaFileType":"CLASS","layerAnnotation":"TESTING","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Autowired","Autowired","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","SpringBootTest"],"constructors":[],"methods":[{"name":"isValidStudentCorrect","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudent(student);"},{"type":"EXPRESSION","structure":"assertTrue(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentIncorrectSchoolType","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2040);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(1100);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudent(student);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentIncorrectRUT","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"  \");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudent(student);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentScoreCorrect","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2023, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertTrue(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":13,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentScoreIncorrectRUT","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\" \");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":13,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentScoreIncorrectScore","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(1100);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":13,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentScoreIncorrectExamDate","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2090, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":13,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentScoreIncorrectStudentName","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":13,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"isValidStudentScoreIncorrectStudentLastName","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":8,"numberOfExecutableStatements":8,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\" \");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":13,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"}]},{"name":"calculateMaxInstallmentsCorrect","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":9,"numberOfExecutableStatements":9,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Juan\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Perez\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(7, maxInstallments, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":14,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"}]},{"name":"calculateMaxInstallmentsInvalidGraduationYear","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2040);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, maxInstallments, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"}]},{"name":"calculateMaxInstallmentsEmptyRut","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\" \");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, maxInstallments, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"}]},{"name":"calculateMaxInstallmentsInvalidSchoolType","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, maxInstallments, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"}]},{"name":"calculateAnnualCostCash","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"// 785.000 CLP\r\nassertEquals(785000, annualCostCash, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"}]},{"name":"calculateAnnualCostCashEmptyRut","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\" \");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"}]},{"name":"calculateAnnualCostCashEmptyFirstName","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\" \");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"}]},{"name":"calculateAnnualCostCashEmptyLastName","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\" \");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"}]},{"name":"calculateAnnualCostCashInvalidBirthDate","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2060, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"}]},{"name":"calculateAnnualCostCashInvalidSchoolType","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"}]},{"name":"calculateAnnualCostCashInvalidGraduationYear","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2070);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"}]},{"name":"calculateSchoolTypeDiscountType0","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Juan\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Perez\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble schoolTypeDiscount = administrationOffice.calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.2, schoolTypeDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"schoolTypeDiscount","type":"double","scope":"local"}]},{"name":"calculateSchoolTypeDiscountType1","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble schoolTypeDiscount = administrationOffice.calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.1, schoolTypeDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"schoolTypeDiscount","type":"double","scope":"local"}]},{"name":"calculateSchoolTypeDiscountType2","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble schoolTypeDiscount = administrationOffice.calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, schoolTypeDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"schoolTypeDiscount","type":"double","scope":"local"}]},{"name":"calculateTimeAfterGraduationDiscountCorrectRange1","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.15, timeAfterGraduationDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"}]},{"name":"calculateTimeAfterGraduationDiscountCorrectRange2","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.08, timeAfterGraduationDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"}]},{"name":"calculateTimeAfterGraduationDiscountCorrectRange3","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2019);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.04, timeAfterGraduationDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"}]},{"name":"calculateTimeAfterGraduationDiscountCorrectRange4","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Voy\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, timeAfterGraduationDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"}]},{"name":"calculateAverageScoreDiscountCorrectRange1","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(960);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.1, averageScoreDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"}]},{"name":"calculateAverageScoreDiscountCorrectRange2","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(910);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.05, averageScoreDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"}]},{"name":"calculateAverageScoreDiscountCorrectRange3","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2019);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(860);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.02, averageScoreDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"}]},{"name":"calculateAverageScoreDiscountCorrectRange4","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Voy\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, averageScoreDiscount, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"}]},{"name":"calculateAnnualCostInstallmentsType2Range1","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"// 1.334.500 CLP\r\nassertEquals(1334500, annualCostInstallments, 1.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":23,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"}]},{"name":"calculateAnnualCostInstallmentsType1Range2","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"// 1.287.400 CLP\r\nassertEquals(1287400, annualCostInstallments, 1.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"}]},{"name":"calculateAnnualCostInstallmentsType0Range3","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Juan\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Perez\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(1193200, annualCostInstallments, 1.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"}]},{"name":"calculateAnnualCostInstallmentsType0Range4","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Voy\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"// 1.256.000 CLP\r\nassertEquals(1256000, annualCostInstallments, 1.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"}]},{"name":"calculateAnnualCostInstallmentsEmpty","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":17,"numberOfExecutableStatements":17,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1995, 6, 10));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostInstallments, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"}]},{"name":"calculateFinalCostCorrectCash","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":16,"numberOfExecutableStatements":16,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble finalCost = administrationOffice.calculateFinalCost(student);"},{"type":"EXPRESSION","structure":"// 785.000 CLP\r\nassertEquals(785000, finalCost, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":21,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"finalCost","type":"double","scope":"local"}]},{"name":"calculateFinalCostCorrectInstallments","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":16,"numberOfExecutableStatements":16,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(1256000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble finalCost = administrationOffice.calculateFinalCost(student);"},{"type":"EXPRESSION","structure":"// 1.256.000 CLP\r\nassertEquals(1256000, finalCost, 0.0);"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":21,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"finalCost","type":"double","scope":"local"}]},{"name":"calculateGeneralInterestCorrect","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":21,"numberOfExecutableStatements":21,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(2);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(0);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nadministrationOffice.checkMissingInstallments(student);"},{"type":"EXPRESSION","structure":"// Getting the installments\r\nList<InstallmentEntity> studentInstallments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"System.out.println(installment);"},{"type":"EXPRESSION","structure":"// Calculating the general interest\r\nadministrationOffice.calculateGeneralInterest(student);"},{"type":"EXPRESSION","structure":"// Getting the installments with the interest\r\nList<InstallmentEntity> studentInstallmentsWithInterest = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"System.out.println(installment);"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(installment.getId());"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":41,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"studentInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"studentInstallmentsWithInterest","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}]},{"name":"updateLastPaymentDateCorrect","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":27,"numberOfExecutableStatements":27,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(1256000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"student.setLastPaymentDate(LocalDate.of(2021, 1, 1));"},{"type":"EXPRESSION","structure":"// Simulating a installment\r\nInstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(1256000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(1);"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2024, 2, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(0);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nadministrationOffice.updateLastPaymentDate(student);"},{"type":"EXPRESSION","structure":"assertEquals(student.getLastPaymentDate(), installment.getInstallmentPaymentDate());"},{"type":"EXPRESSION","structure":"// Deleting the installments\r\ninstallmentService.deleteInstallment(installment.getId());"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":38,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}]},{"name":"checkMissingInstallmentsCorrect","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":19,"numberOfExecutableStatements":19,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(2);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(1256000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nadministrationOffice.checkMissingInstallments(student);"},{"type":"EXPRESSION","structure":"List<InstallmentEntity> studentInstallments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"assertEquals(student.getAgreedInstallments(), studentInstallments.size(), 0.0);"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(installment.getId());"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":29,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"studentInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}]}],"statements":[{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudent(student);"},{"type":"EXPRESSION","structure":"assertTrue(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2040);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(1100);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudent(student);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"  \");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudent(student);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2023, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertTrue(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\" \");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(1100);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2090, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(LocalDate.of(2024, 4, 15));"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\" \");"},{"type":"EXPRESSION","structure":"// Simulating the validation\r\nboolean isValid = administrationOffice.isValidStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"assertFalse(isValid);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Juan\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Perez\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(7, maxInstallments, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2040);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, maxInstallments, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\" \");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, maxInstallments, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nint maxInstallments = administrationOffice.calculateMaxInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, maxInstallments, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"// 785.000 CLP\r\nassertEquals(785000, annualCostCash, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\" \");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\" \");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\" \");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2060, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(7);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(2000, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2070);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in cash\r\ndouble annualCostCash = administrationOffice.calculateAnnualCostCash(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostCash, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Juan\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Perez\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble schoolTypeDiscount = administrationOffice.calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.2, schoolTypeDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble schoolTypeDiscount = administrationOffice.calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.1, schoolTypeDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble schoolTypeDiscount = administrationOffice.calculateSchoolTypeDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, schoolTypeDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.15, timeAfterGraduationDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.08, timeAfterGraduationDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2019);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.04, timeAfterGraduationDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Voy\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble timeAfterGraduationDiscount = administrationOffice.calculateTimeAfterGraduationDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, timeAfterGraduationDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(960);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.1, averageScoreDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(910);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.05, averageScoreDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2019);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(860);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0.02, averageScoreDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Voy\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble averageScoreDiscount = administrationOffice.calculateAverageScoreDiscount(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, averageScoreDiscount, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(2);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2023);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"// 1.334.500 CLP\r\nassertEquals(1334500, annualCostInstallments, 1.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Armando\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Mesas\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2021);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"// 1.287.400 CLP\r\nassertEquals(1287400, annualCostInstallments, 1.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Juan\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Perez\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(1193200, annualCostInstallments, 1.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Voy\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"// 1.256.000 CLP\r\nassertEquals(1256000, annualCostInstallments, 1.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1995, 6, 10));"},{"type":"EXPRESSION","structure":"student.setSchoolType(1);"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2020);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble annualCostInstallments = administrationOffice.calculateAnnualCostInstallments(student);"},{"type":"EXPRESSION","structure":"assertEquals(0, annualCostInstallments, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Cash\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(785000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble finalCost = administrationOffice.calculateFinalCost(student);"},{"type":"EXPRESSION","structure":"// 785.000 CLP\r\nassertEquals(785000, finalCost, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"20.000.000-2\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(1256000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\ndouble finalCost = administrationOffice.calculateFinalCost(student);"},{"type":"EXPRESSION","structure":"// 1.256.000 CLP\r\nassertEquals(1256000, finalCost, 0.0);"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(2);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(0);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nadministrationOffice.checkMissingInstallments(student);"},{"type":"EXPRESSION","structure":"// Getting the installments\r\nList<InstallmentEntity> studentInstallments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"System.out.println(installment);"},{"type":"EXPRESSION","structure":"// Calculating the general interest\r\nadministrationOffice.calculateGeneralInterest(student);"},{"type":"EXPRESSION","structure":"// Getting the installments with the interest\r\nList<InstallmentEntity> studentInstallmentsWithInterest = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"System.out.println(installment);"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(installment.getId());"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(1);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(1);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(1256000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"student.setLastPaymentDate(LocalDate.of(2021, 1, 1));"},{"type":"EXPRESSION","structure":"// Simulating a installment\r\nInstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(1256000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(1);"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2024, 2, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(0);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nadministrationOffice.updateLastPaymentDate(student);"},{"type":"EXPRESSION","structure":"assertEquals(student.getLastPaymentDate(), installment.getInstallmentPaymentDate());"},{"type":"EXPRESSION","structure":"// Deleting the installments\r\ninstallmentService.deleteInstallment(installment.getId());"},{"type":"EXPRESSION","structure":"// Setting up the student\r\nStudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(3);"},{"type":"EXPRESSION","structure":"student.setInstallmentsPaid(2);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(1256000);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Simulating the payment in installments\r\nadministrationOffice.checkMissingInstallments(student);"},{"type":"EXPRESSION","structure":"List<InstallmentEntity> studentInstallments = installmentService.findAllByInstallmentRUT(student.getRut());"},{"type":"EXPRESSION","structure":"assertEquals(student.getAgreedInstallments(), studentInstallments.size(), 0.0);"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(installment.getId());"}],"classVariables":[{"name":"administrationOffice","type":"AdministrationOffice","scope":"instance"},{"name":"installmentService","type":"InstallmentService","scope":"instance"},{"name":"studentService","type":"StudentService","scope":"instance"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"isValid","type":"boolean","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"maxInstallments","type":"int","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostCash","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"schoolTypeDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"schoolTypeDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"schoolTypeDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"timeAfterGraduationDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"averageScoreDiscount","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"annualCostInstallments","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"finalCost","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"finalCost","type":"double","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"studentInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"studentInstallmentsWithInterest","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"studentInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"}],"innerClasses":[],"usedClasses":["void","AdministrationOffice","StudentService","InstallmentService"],"classDependencies":null,"dependentClasses":null,"genericUsages":null,"exceptionHandling":[],"linesOfCode":1018},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":649,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate","java.util.ArrayList","java.util.List"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.boot.test.context.SpringBootTest"],"INTERNAL":["TopEducation.TopEducationApp.entities.InstallmentEntity","TopEducation.TopEducationApp.entities.StudentEntity","TopEducation.TopEducationApp.entities.StudentScoreEntity","TopEducation.TopEducationApp.services.AdministrationOffice","TopEducation.TopEducationApp.services.InstallmentService","TopEducation.TopEducationApp.services.StudentService"],"EXTERNAL_UNKNOWN":["org.junit.jupiter.api.Test","org.junit.jupiter.api.Assertions"]},"programMetrics":{"numberOfMethods":41,"sumOfExecutableStatements":649,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":1018},"complexityMetrics":{"approxMcCabeCC":41,"maxMethodMcCabeCC":1,"improvedCC":0.6777996070726916},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":820,"lackOfCohesion2":820,"lackOfCohesion3":41,"lackOfCohesion4":41,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"InstallmentServiceTest","javaFileType":"CLASS","layerAnnotation":"TESTING","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Test","Test","Test","Test","Test","Test","Test","SpringBootTest"],"constructors":[],"methods":[{"name":"saveAndDeleteInstallment","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":9,"numberOfExecutableStatements":9,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Verify that the installment was saved\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installments in savedInstallment\r\ninstallmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":23,"mcCabeComplexity":1},"methodVariables":[{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"}]},{"name":"findAllByInstallmentRUT","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":9,"numberOfExecutableStatements":9,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Verify that the installment was saved\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installment in savedInstallment\r\ninstallmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":23,"mcCabeComplexity":1},"methodVariables":[{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"}]},{"name":"findAllPaidInstallmentsByRUT","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":16,"numberOfExecutableStatements":16,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity unpaidInstallment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(unpaidInstallment);"},{"type":"EXPRESSION","structure":"InstallmentEntity paidInstallment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentStatus(1);"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(paidInstallment);"},{"type":"EXPRESSION","structure":"// Get all paid installments\r\nList<InstallmentEntity> paidInstallments = installmentService.findAllPaidInstallmentsByRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installments\r\ninstallmentService.deleteInstallment(unpaidInstallment.getId());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(paidInstallment.getId());"},{"type":"EXPRESSION","structure":"// Verify that the installments were deleted\r\nList<InstallmentEntity> deletedInstallments = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":33,"mcCabeComplexity":1},"methodVariables":[{"name":"unpaidInstallment","type":"InstallmentEntity","scope":"local"},{"name":"paidInstallment","type":"InstallmentEntity","scope":"local"},{"name":"paidInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallments","type":"List<InstallmentEntity>","scope":"local"}]},{"name":"findAllOverdueInstallmentsByRUT","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":18,"numberOfExecutableStatements":18,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity unpaidInstallment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentPaymentDate(LocalDate.parse(\"2023-10-01\"));"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(unpaidInstallment);"},{"type":"EXPRESSION","structure":"InstallmentEntity unpaidInstallment2 = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentPaymentDate(LocalDate.parse(\"2023-01-01\"));"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentOverdueStatus(1);"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(unpaidInstallment2);"},{"type":"EXPRESSION","structure":"// Get all overdue installments\r\nList<InstallmentEntity> overdueInstallments = installmentService.findAllOverdueInstallmentsByRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installments\r\ninstallmentService.deleteInstallment(unpaidInstallment.getId());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(unpaidInstallment2.getId());"},{"type":"EXPRESSION","structure":"// Verify that the installments were deleted\r\nList<InstallmentEntity> deletedInstallments = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":34,"mcCabeComplexity":1},"methodVariables":[{"name":"unpaidInstallment","type":"InstallmentEntity","scope":"local"},{"name":"unpaidInstallment2","type":"InstallmentEntity","scope":"local"},{"name":"overdueInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallments","type":"List<InstallmentEntity>","scope":"local"}]},{"name":"isInstallmentOverdueFalse","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":13,"numberOfExecutableStatements":13,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2023, 10, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(150000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"installmentService.updateInstallmentOverdueStatus(installment);"},{"type":"EXPRESSION","structure":"// Check that the installment is overdue\r\nassertEquals(1, installment.getInstallmentOverdueStatus());"},{"type":"EXPRESSION","structure":"// Find the installment by RUT and delete it\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":23,"mcCabeComplexity":1},"methodVariables":[{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"}]},{"name":"isInstallmentOverdueTrue","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":12,"numberOfExecutableStatements":12,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2021, 10, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(150000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"assertTrue(installmentService.updateInstallmentOverdueStatus(installment));"},{"type":"EXPRESSION","structure":"// Find the installment by RUT and delete it\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":18,"mcCabeComplexity":1},"methodVariables":[{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"}]},{"name":"markInstallmentAsPAid","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":13,"numberOfExecutableStatements":13,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2021, 10, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(150000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Find the installment by RUT\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installmentService.markInstallmentAsPAid(savedInstallment.get(0));"},{"type":"EXPRESSION","structure":"assertEquals(1, savedInstallment.get(0).getInstallmentStatus());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":22,"mcCabeComplexity":1},"methodVariables":[{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"}]}],"statements":[{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Verify that the installment was saved\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installments in savedInstallment\r\ninstallmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Verify that the installment was saved\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installment in savedInstallment\r\ninstallmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"InstallmentEntity unpaidInstallment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(unpaidInstallment);"},{"type":"EXPRESSION","structure":"InstallmentEntity paidInstallment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentPaymentDate(LocalDate.parse(\"2021-01-01\"));"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentStatus(1);"},{"type":"EXPRESSION","structure":"paidInstallment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(paidInstallment);"},{"type":"EXPRESSION","structure":"// Get all paid installments\r\nList<InstallmentEntity> paidInstallments = installmentService.findAllPaidInstallmentsByRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installments\r\ninstallmentService.deleteInstallment(unpaidInstallment.getId());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(paidInstallment.getId());"},{"type":"EXPRESSION","structure":"// Verify that the installments were deleted\r\nList<InstallmentEntity> deletedInstallments = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"InstallmentEntity unpaidInstallment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentPaymentDate(LocalDate.parse(\"2023-10-01\"));"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(unpaidInstallment);"},{"type":"EXPRESSION","structure":"InstallmentEntity unpaidInstallment2 = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentPaymentDate(LocalDate.parse(\"2023-01-01\"));"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentOverdueStatus(1);"},{"type":"EXPRESSION","structure":"unpaidInstallment2.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(unpaidInstallment2);"},{"type":"EXPRESSION","structure":"// Get all overdue installments\r\nList<InstallmentEntity> overdueInstallments = installmentService.findAllOverdueInstallmentsByRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"// Delete the installments\r\ninstallmentService.deleteInstallment(unpaidInstallment.getId());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(unpaidInstallment2.getId());"},{"type":"EXPRESSION","structure":"// Verify that the installments were deleted\r\nList<InstallmentEntity> deletedInstallments = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2023, 10, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(150000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"installmentService.updateInstallmentOverdueStatus(installment);"},{"type":"EXPRESSION","structure":"// Check that the installment is overdue\r\nassertEquals(1, installment.getInstallmentOverdueStatus());"},{"type":"EXPRESSION","structure":"// Find the installment by RUT and delete it\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2021, 10, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(150000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"assertTrue(installmentService.updateInstallmentOverdueStatus(installment));"},{"type":"EXPRESSION","structure":"// Find the installment by RUT and delete it\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"InstallmentEntity installment = new InstallmentEntity();"},{"type":"EXPRESSION","structure":"installment.setInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installment.setInstallmentPaymentDate(LocalDate.of(2021, 10, 1));"},{"type":"EXPRESSION","structure":"installment.setInstallmentStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverdueStatus(0);"},{"type":"EXPRESSION","structure":"installment.setInstallmentOverduePrice(150000);"},{"type":"EXPRESSION","structure":"installment.setInstallmentAmount(100000);"},{"type":"EXPRESSION","structure":"installmentService.saveInstallment(installment);"},{"type":"EXPRESSION","structure":"// Find the installment by RUT\r\nList<InstallmentEntity> savedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"},{"type":"EXPRESSION","structure":"installmentService.markInstallmentAsPAid(savedInstallment.get(0));"},{"type":"EXPRESSION","structure":"assertEquals(1, savedInstallment.get(0).getInstallmentStatus());"},{"type":"EXPRESSION","structure":"installmentService.deleteInstallment(savedInstallment.get(0).getId());"},{"type":"EXPRESSION","structure":"// Verify that the installment was deleted\r\nList<InstallmentEntity> deletedInstallment = installmentService.findAllByInstallmentRUT(\"TestRUT\");"}],"classVariables":[{"name":"installmentService","type":"InstallmentService","scope":"instance"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"unpaidInstallment","type":"InstallmentEntity","scope":"local"},{"name":"paidInstallment","type":"InstallmentEntity","scope":"local"},{"name":"paidInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"unpaidInstallment","type":"InstallmentEntity","scope":"local"},{"name":"unpaidInstallment2","type":"InstallmentEntity","scope":"local"},{"name":"overdueInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallments","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"installment","type":"InstallmentEntity","scope":"local"},{"name":"savedInstallment","type":"List<InstallmentEntity>","scope":"local"},{"name":"deletedInstallment","type":"List<InstallmentEntity>","scope":"local"}],"innerClasses":[],"usedClasses":["void","InstallmentService"],"classDependencies":null,"dependentClasses":null,"genericUsages":null,"exceptionHandling":[],"linesOfCode":204},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":90,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate","java.util.ArrayList","java.util.List"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.boot.test.context.SpringBootTest"],"INTERNAL":["TopEducation.TopEducationApp.entities.InstallmentEntity","TopEducation.TopEducationApp.services.InstallmentService"],"EXTERNAL_UNKNOWN":["org.junit.jupiter.api.Test","org.junit.jupiter.api.Assertions"]},"programMetrics":{"numberOfMethods":7,"sumOfExecutableStatements":90,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":204},"complexityMetrics":{"approxMcCabeCC":7,"maxMethodMcCabeCC":1,"improvedCC":0.47549019607843135},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":21,"lackOfCohesion2":21,"lackOfCohesion3":7,"lackOfCohesion4":7,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"StudentScoreServiceTest","javaFileType":"CLASS","layerAnnotation":"TESTING","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Test","Test","SpringBootTest"],"constructors":[],"methods":[{"name":"saveAndDeleteStudentScore","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":10,"numberOfExecutableStatements":10,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"StudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(java.time.LocalDate.now());"},{"type":"EXPRESSION","structure":"// Save the student grade\r\nstudentScoreService.saveStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"// Verify that the student grade was saved\r\nStudentScoreEntity savedStudentScore = studentScoreService.findById(studentScore.getId());"},{"type":"EXPRESSION","structure":"// Delete the student grade\r\nstudentScoreService.deleteStudentGrade(studentScore.getId());"},{"type":"EXPRESSION","structure":"// Verify that the student grade was deleted\r\nStudentScoreEntity deletedStudentScore = studentScoreService.findById(studentScore.getId());"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":26,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"savedStudentScore","type":"StudentScoreEntity","scope":"local"},{"name":"deletedStudentScore","type":"StudentScoreEntity","scope":"local"}]},{"name":"getAllStudentGradesByStudentRUT","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":16,"numberOfExecutableStatements":16,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"StudentScoreEntity studentScore1 = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore1.setScoreRUT(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"studentScore1.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore1.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"studentScore1.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore1.setExamDate(java.time.LocalDate.now());"},{"type":"EXPRESSION","structure":"StudentScoreEntity studentScore2 = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore2.setScoreRUT(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"studentScore2.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore2.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"studentScore2.setScore(810);"},{"type":"EXPRESSION","structure":"studentScore2.setExamDate(java.time.LocalDate.now());"},{"type":"EXPRESSION","structure":"// Save the student grades\r\nstudentScoreService.saveStudentScore(studentScore1);"},{"type":"EXPRESSION","structure":"studentScoreService.saveStudentScore(studentScore2);"},{"type":"EXPRESSION","structure":"// Delete the student grades\r\nstudentScoreService.deleteStudentGrade(studentScore1.getId());"},{"type":"EXPRESSION","structure":"studentScoreService.deleteStudentGrade(studentScore2.getId());"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":26,"mcCabeComplexity":1},"methodVariables":[{"name":"studentScore1","type":"StudentScoreEntity","scope":"local"},{"name":"studentScore2","type":"StudentScoreEntity","scope":"local"}]}],"statements":[{"type":"EXPRESSION","structure":"StudentScoreEntity studentScore = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore.setScoreRUT(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"studentScore.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore.setExamDate(java.time.LocalDate.now());"},{"type":"EXPRESSION","structure":"// Save the student grade\r\nstudentScoreService.saveStudentScore(studentScore);"},{"type":"EXPRESSION","structure":"// Verify that the student grade was saved\r\nStudentScoreEntity savedStudentScore = studentScoreService.findById(studentScore.getId());"},{"type":"EXPRESSION","structure":"// Delete the student grade\r\nstudentScoreService.deleteStudentGrade(studentScore.getId());"},{"type":"EXPRESSION","structure":"// Verify that the student grade was deleted\r\nStudentScoreEntity deletedStudentScore = studentScoreService.findById(studentScore.getId());"},{"type":"EXPRESSION","structure":"StudentScoreEntity studentScore1 = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore1.setScoreRUT(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"studentScore1.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore1.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"studentScore1.setScore(800);"},{"type":"EXPRESSION","structure":"studentScore1.setExamDate(java.time.LocalDate.now());"},{"type":"EXPRESSION","structure":"StudentScoreEntity studentScore2 = new StudentScoreEntity();"},{"type":"EXPRESSION","structure":"studentScore2.setScoreRUT(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"studentScore2.setStudentName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"studentScore2.setStudentLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"studentScore2.setScore(810);"},{"type":"EXPRESSION","structure":"studentScore2.setExamDate(java.time.LocalDate.now());"},{"type":"EXPRESSION","structure":"// Save the student grades\r\nstudentScoreService.saveStudentScore(studentScore1);"},{"type":"EXPRESSION","structure":"studentScoreService.saveStudentScore(studentScore2);"},{"type":"EXPRESSION","structure":"// Delete the student grades\r\nstudentScoreService.deleteStudentGrade(studentScore1.getId());"},{"type":"EXPRESSION","structure":"studentScoreService.deleteStudentGrade(studentScore2.getId());"}],"classVariables":[{"name":"studentScoreService","type":"StudentScoreService","scope":"instance"},{"name":"studentScore","type":"StudentScoreEntity","scope":"local"},{"name":"savedStudentScore","type":"StudentScoreEntity","scope":"local"},{"name":"deletedStudentScore","type":"StudentScoreEntity","scope":"local"},{"name":"studentScore1","type":"StudentScoreEntity","scope":"local"},{"name":"studentScore2","type":"StudentScoreEntity","scope":"local"}],"innerClasses":[],"usedClasses":["void","StudentScoreService"],"classDependencies":null,"dependentClasses":null,"genericUsages":null,"exceptionHandling":[],"linesOfCode":65},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":26,"classifiedDependencies":{"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.boot.test.context.SpringBootTest"],"INTERNAL":["TopEducation.TopEducationApp.entities.StudentScoreEntity","TopEducation.TopEducationApp.services.StudentScoreService"],"EXTERNAL_UNKNOWN":["org.junit.jupiter.api.Test"]},"programMetrics":{"numberOfMethods":2,"sumOfExecutableStatements":26,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":65},"complexityMetrics":{"approxMcCabeCC":2,"maxMethodMcCabeCC":1,"improvedCC":0.4307692307692308},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":1,"lackOfCohesion2":1,"lackOfCohesion3":2,"lackOfCohesion4":2,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"StudentServiceTest","javaFileType":"CLASS","layerAnnotation":"TESTING","superClasses":[],"implementedInterfaces":[],"annotations":["Autowired","Test","SpringBootTest"],"constructors":[],"methods":[{"name":"saveAndDeleteStudent","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":18,"numberOfExecutableStatements":18,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"StudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(2);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(0);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Save the student\r\nstudentService.saveStudent(student);"},{"type":"EXPRESSION","structure":"// Verify that the student was saved\r\nStudentEntity savedStudent = studentService.findById(student.getId());"},{"type":"EXPRESSION","structure":"// Delete the student\r\nstudentService.deleteStudent(student.getId());"},{"type":"EXPRESSION","structure":"// Verify that the student was deleted\r\nStudentEntity deletedStudent = studentService.findById(student.getId());"}]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":44,"mcCabeComplexity":1},"methodVariables":[{"name":"student","type":"StudentEntity","scope":"local"},{"name":"savedStudent","type":"StudentEntity","scope":"local"},{"name":"deletedStudent","type":"StudentEntity","scope":"local"}]}],"statements":[{"type":"EXPRESSION","structure":"StudentEntity student = new StudentEntity();"},{"type":"EXPRESSION","structure":"student.setRut(\"99.999.999-K\");"},{"type":"EXPRESSION","structure":"student.setFirstName(\"Aquiles\");"},{"type":"EXPRESSION","structure":"student.setLastName(\"Baeza\");"},{"type":"EXPRESSION","structure":"student.setBirthDate(LocalDate.of(1990, 1, 1));"},{"type":"EXPRESSION","structure":"student.setSchoolType(0);"},{"type":"EXPRESSION","structure":"student.setSchoolName(\"Colegio de Prueba\");"},{"type":"EXPRESSION","structure":"student.setGraduationYear(2010);"},{"type":"EXPRESSION","structure":"student.setExamsTaken(2);"},{"type":"EXPRESSION","structure":"student.setAverageGrade(800);"},{"type":"EXPRESSION","structure":"student.setPaymentMethod(\"Installments\");"},{"type":"EXPRESSION","structure":"student.setAgreedInstallments(2);"},{"type":"EXPRESSION","structure":"student.setTotalAmountPaid(0);"},{"type":"EXPRESSION","structure":"student.setTotalAmountToPay(0);"},{"type":"EXPRESSION","structure":"// Save the student\r\nstudentService.saveStudent(student);"},{"type":"EXPRESSION","structure":"// Verify that the student was saved\r\nStudentEntity savedStudent = studentService.findById(student.getId());"},{"type":"EXPRESSION","structure":"// Delete the student\r\nstudentService.deleteStudent(student.getId());"},{"type":"EXPRESSION","structure":"// Verify that the student was deleted\r\nStudentEntity deletedStudent = studentService.findById(student.getId());"}],"classVariables":[{"name":"studentService","type":"StudentService","scope":"instance"},{"name":"student","type":"StudentEntity","scope":"local"},{"name":"savedStudent","type":"StudentEntity","scope":"local"},{"name":"deletedStudent","type":"StudentEntity","scope":"local"}],"innerClasses":[],"usedClasses":["void","StudentService"],"classDependencies":null,"dependentClasses":null,"genericUsages":null,"exceptionHandling":[],"linesOfCode":54},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":18,"classifiedDependencies":{"JAVA_STANDARD":["java.time.LocalDate","java.util.ArrayList"],"SPRING":["org.springframework.beans.factory.annotation.Autowired","org.springframework.boot.test.context.SpringBootTest"],"INTERNAL":["TopEducation.TopEducationApp.entities.StudentEntity","TopEducation.TopEducationApp.services.StudentService"],"EXTERNAL_UNKNOWN":["org.junit.jupiter.api.Test"]},"programMetrics":{"numberOfMethods":1,"sumOfExecutableStatements":18,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":54},"complexityMetrics":{"approxMcCabeCC":1,"maxMethodMcCabeCC":1,"improvedCC":0.35185185185185186},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":1,"lackOfCohesion4":1,"lackOfCohesion5":1.0}}},{"classInstance":{"name":"TopEducationAppMavenApplicationTests","javaFileType":"CLASS","layerAnnotation":"TESTING","superClasses":[],"implementedInterfaces":[],"annotations":["Test","SpringBootTest"],"constructors":[],"methods":[{"name":"contextLoads","basicInfo":{"accessModifier":"","returnType":"void"},"statementsInfo":{"numberOfStatements":0,"numberOfExecutableStatements":0,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[]},"inputParameters":[],"outputParameters":[],"methodMetrics":{"linesOfCode":2,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[],"classVariables":[],"innerClasses":[],"usedClasses":["void"],"classDependencies":null,"dependentClasses":null,"genericUsages":null,"exceptionHandling":[],"linesOfCode":8},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":0,"classifiedDependencies":{"SPRING":["org.springframework.boot.test.context.SpringBootTest"],"EXTERNAL_UNKNOWN":["org.junit.jupiter.api.Test"]},"programMetrics":{"numberOfMethods":1,"sumOfExecutableStatements":0,"maxInputParameters":0,"maxOutputParameters":0,"linesOfCode":8},"complexityMetrics":{"approxMcCabeCC":1,"maxMethodMcCabeCC":1,"improvedCC":0.125},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":1,"lackOfCohesion4":1,"lackOfCohesion5":0.0}}}],"otherClasses":[{"classInstance":{"name":"TopEducationAppMavenApplication","javaFileType":"CLASS","layerAnnotation":"OTHER","superClasses":[],"implementedInterfaces":[],"annotations":["SpringBootApplication"],"constructors":[],"methods":[{"name":"main","basicInfo":{"accessModifier":"public","returnType":"void"},"statementsInfo":{"numberOfStatements":1,"numberOfExecutableStatements":1,"numberOfControlStatements":0,"numberOfReturnStatements":0,"numberOfThrowStatements":0,"numberOfCatchClauses":0,"numberOfLogicalOperators":0,"numberOfTernaryOperators":0,"statements":[{"type":"EXPRESSION","structure":"SpringApplication.run(TopEducationAppMavenApplication.class, args);"}]},"inputParameters":[{"name":"args","type":"String[]","annotations":[]}],"outputParameters":[],"methodMetrics":{"linesOfCode":3,"mcCabeComplexity":1},"methodVariables":[]}],"statements":[{"type":"EXPRESSION","structure":"SpringApplication.run(TopEducationAppMavenApplication.class, args);"}],"classVariables":[],"innerClasses":[],"usedClasses":["void","String[]"],"classDependencies":[],"dependentClasses":[],"genericUsages":null,"exceptionHandling":[],"linesOfCode":8},"classAnalysisInstance":{"classCount":1,"interfaceCount":0,"statementCount":1,"classifiedDependencies":{"SPRING":["org.springframework.boot.SpringApplication","org.springframework.boot.autoconfigure.SpringBootApplication"]},"programMetrics":{"numberOfMethods":1,"sumOfExecutableStatements":1,"maxInputParameters":1,"maxOutputParameters":0,"linesOfCode":8},"complexityMetrics":{"approxMcCabeCC":1,"maxMethodMcCabeCC":1,"improvedCC":0.375},"couplingMetrics":{"afferentCoupling":0,"efferentCoupling":0,"instability":0.0},"cohesionMetrics":{"lackOfCohesion1":0,"lackOfCohesion2":0,"lackOfCohesion3":1,"lackOfCohesion4":1,"lackOfCohesion5":0.0}}}],"pomFile":{"parentSection":{"groupId":"org.springframework.boot","artifactId":"spring-boot-starter-parent","version":"3.1.4"},"groupId":"TopEducation","artifactId":"TopEducationApp","version":"BETA","description":"Top Education Maven App","url":null,"license":null,"developers":[],"javaVersion":null,"dependencies":[{"groupId":"org.springframework.boot","artifactId":"spring-boot-starter-data-jpa","version":null,"basePackage":"org.springframework.boot"},{"groupId":"org.springframework.boot","artifactId":"spring-boot-starter-thymeleaf","version":null,"basePackage":"org.springframework.boot"},{"groupId":"org.springframework.boot","artifactId":"spring-boot-starter-web","version":null,"basePackage":"org.springframework.boot"},{"groupId":"org.postgresql","artifactId":"postgresql","version":null,"basePackage":"org.postgresql"},{"groupId":"org.projectlombok","artifactId":"lombok","version":null,"basePackage":"org.projectlombok"},{"groupId":"org.springframework.boot","artifactId":"spring-boot-starter-test","version":null,"basePackage":"org.springframework.boot"},{"groupId":"org.jacoco","artifactId":"jacoco-maven-plugin","version":"0.8.12","basePackage":"org.jacoco"},{"groupId":"org.apache.maven.plugins","artifactId":"maven-dependency-plugin","version":"3.6.0","basePackage":"org.apache.maven.plugins"},{"groupId":"org.apache.poi","artifactId":"poi-ooxml","version":"5.0.0","basePackage":"org.apache.poi"}]},"gradleFile":null}